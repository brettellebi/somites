[{"path":"index.html","id":"about","chapter":"1 About","heading":"1 About","text":"book sets analysis somite development periods, Ali Seleit Aulehla Group EMBL Heidelberg.","code":""},{"path":"alignment-of-f0-and-f2-generations.html","id":"alignment-of-f0-and-f2-generations","chapter":"2 Alignment of F0 and F2 generations","heading":"2 Alignment of F0 and F2 generations","text":"code used process data using Snakemake1 can found :Config:https://github.com/brettellebi/somites/tree/master/configConfig:https://github.com/brettellebi/somites/tree/master/configWorkflow:https://github.com/brettellebi/somites/tree/master/workflowWorkflow:https://github.com/brettellebi/somites/tree/master/workflow","code":""},{"path":"homozygosity-of-f0-cab-and-kaga.html","id":"homozygosity-of-f0-cab-and-kaga","chapter":"3 Homozygosity of F0 Cab and Kaga","heading":"3 Homozygosity of F0 Cab and Kaga","text":"","code":""},{"path":"homozygosity-of-f0-cab-and-kaga.html","id":"read-in-total-medaka-genome-count","chapter":"3 Homozygosity of F0 Cab and Kaga","heading":"3.1 Read in total medaka genome count","text":"","code":"\n# Get chromosome lengths\nmed_chr_lens = read.table(here::here(\"data\",\n                                     \"Oryzias_latipes.ASM223467v1.dna.toplevel.fa_chr_counts.txt\"),\n                          col.names = c(\"chr\", \"end\"))\n# Add start\nmed_chr_lens$start = 1\n# Reorder\nmed_chr_lens = med_chr_lens %>% \n  dplyr::select(chr, start, end) %>% \n  # remove MT\n  dplyr::filter(chr != \"MT\")\n\n# Total HdrR sequence length\ntotal_hdrr_bases = sum(med_chr_lens$end)"},{"path":"homozygosity-of-f0-cab-and-kaga.html","id":"read-in-data","chapter":"3 Homozygosity of F0 Cab and Kaga","heading":"3.2 Read in data","text":"","code":"\nin_dir = \"/nfs/research/birney/users/ian/somites/recombination_blocks\"\n\nin_files = list.files(in_dir, pattern = \"20210803_hmm_output_F0\", full.names = T)\n\n# Read into list\nck_list = purrr::map(in_files, function(FILE){\n  out = readr::read_tsv(FILE,\n                        col_types = \"ciiidii\")\n})\n# Set names as bin length\nnames(ck_list) = basename(in_files) %>% \n  stringr::str_split(\"_\", simplify = T) %>% \n  subset(select = 6) %>% \n  stringr::str_remove(\".txt\")\n# Reorder\nck_list = ck_list[order(as.numeric(names(ck_list)))]\n\ncounter = 0\nck_list = purrr::map(ck_list, function(data){\n  counter <<- counter + 1\n  # set bin length\n  bin_length = as.numeric(names(ck_list)[counter])\n  # add bin start and end coordinates\n  df = data %>% \n    dplyr::mutate(LANE = sample %>%\n                    stringr::str_split(\"/\", simplify = T) %>% \n                    subset(select = 10),\n                  BIN_LENGTH = bin_length,\n                  BIN_START = bin * bin_length + 1,\n                  BIN_END = bin * bin_length + bin_length,\n                  BIN_LENGTH_KB = BIN_LENGTH / 1e3,\n                  READS_PER_BIN = mat + pat)\n  return(df)\n})\n\n# Recode `ck_list$state` so that 0,1,2 corresponds to HOM_REF, HET, HOM_ALT \nck_list = purrr::map(ck_list, function(df){\n  df = df %>% \n    dplyr::mutate(state = dplyr::recode(state,\n                                        `0` = 2,\n                                        `1` = 1,\n                                        `2` = 0))\n})"},{"path":"homozygosity-of-f0-cab-and-kaga.html","id":"get-total-number-of-bases-covered-by-each-state","chapter":"3 Homozygosity of F0 Cab and Kaga","heading":"3.2.1 Get total number of bases covered by each state","text":"Plot","code":"\n# Take 5kb DF\ndf = ck_list$`5000`\n\n# Set states to loop over\nstates = 0:2\nnames(states) = states\n\n# Run loop over each LANE\n\nbase_cov_df = df %>% \n  split(., f = .$LANE) %>% \n  purrr::map(., function(LANE){\n    # convert to ranges object\n    lane_ranges = GenomicRanges::makeGRangesFromDataFrame(LANE,\n                                                          keep.extra.columns = T,\n                                                          ignore.strand = T,\n                                                          seqnames.field = \"chr\", \n                                                          start.field = \"BIN_START\",\n                                                          end.field = \"BIN_END\")\n    # get total bases covered by each state\n    purrr::map_dfr(states, function(STATE){\n      lane_ranges[lane_ranges$state == STATE] %>% \n        # merge contiguous ranges\n        GenomicRanges::reduce(.) %>% \n        # get width of ranges\n        width(.) %>% \n        # get total bases covered\n        sum(.) %>% \n        # coerce into data frame\n        data.frame(\"BASES_COVERED\" = .)\n      }, .id = \"STATE\") %>% \n        # add FREQ column\n        dplyr::mutate(FREQ = BASES_COVERED / total_hdrr_bases) %>% \n        # add UNCLASSIFIED row\n        tibble::add_row(STATE = \"UNCLASSIFIED\", \n                        BASES_COVERED = total_hdrr_bases - sum(.$BASES_COVERED),\n                        FREQ = (total_hdrr_bases - sum(.$BASES_COVERED)) / total_hdrr_bases)\n    }\n  ) %>% \n  dplyr::bind_rows(.id = \"LANE\")\n# Plot\nck_prop_plot = base_cov_df %>% \n  dplyr::mutate(STATE = factor(STATE, levels = c(0,1,2, \"UNCLASSIFIED\")),\n                STATE_RECODE = dplyr::recode(STATE,\n                                             `0` = \"HOM REF (HdrR)\",\n                                             `1` = \"HET\",\n                                             `2` = \"HOM ALT\",\n                                             \"UNCLASSIFIED\" = \"Unclassified\")) %>% \n  # plot\n  ggplot(aes(STATE_RECODE, FREQ, colour = STATE, fill = STATE)) +\n    geom_col() +\n    facet_grid(cols = vars(LANE)) +\n    theme_bw() +\n    scale_colour_manual(values = pal_ck_1_lines) +\n    scale_fill_manual(values = pal_ck_1) +\n    guides(colour = \"none\", fill = \"none\") +\n    xlab(\"Genotype\") +\n    ylab(\"Proportion of reference bases covered\")\n\nck_prop_plot\n\n# Interactive version\nggplotly(ck_prop_plot)"},{"path":"homozygosity-of-f0-cab-and-kaga.html","id":"karyoplot","chapter":"3 Homozygosity of F0 Cab and Kaga","heading":"3.3 Karyoplot","text":"Extract y cutoff points yPlot Karyoplots\nFigure 3.1: Bin length: 5 kb\n","code":"\nbb_list_ck = purrr::map(ck_list, function(df){\n  # loop over different bin lengths\n  block_bounds_list = df %>% \n    # loop over LANE\n    split(., f = .$LANE) %>% \n    purrr::map(., function(LANE){\n      # loop over CHR\n      LANE %>% \n        split(., f = .$chr) %>% \n        purrr::map(., function(CHR){\n          # Get lengths of each contiguous state\n          cont_len = rle(CHR$state)\n          \n          # Get cumulative sum of those lengths\n          cum_blocks = cumsum(cont_len$lengths)\n          \n          # Get rows that correspond to block changes\n          block_bounds = CHR[cum_blocks, ] %>% \n            # Add end of previous black\n            dplyr::mutate(END_PREV = dplyr::lag(BIN_END)) %>% \n            # Replace the NA in the first row with `1`\n            dplyr::mutate(END_PREV = tidyr::replace_na(END_PREV, 1)) %>% \n            # Add colour\n            dplyr::mutate(COLOUR = dplyr::recode(state,\n                                                 !!!pal_ck_1[-which(names(pal_ck_1) == \"UNCLASSIFIED\")])) \n          \n        }) %>% \n            dplyr::bind_rows()\n      \n  })\n})\nlc_list_ck = purrr::map(bb_list_ck, function(block_bounds_list){\n  lane_cutoffs = cut(0:1, breaks = length(block_bounds_list)) %>% \n    levels(.) %>% \n    data.frame(lower = as.numeric( sub(\"\\\\((.+),.*\", \"\\\\1\", .) ),\n               upper = as.numeric( sub(\"[^,]*,([^]]*)\\\\]\", \"\\\\1\", .) )) %>% \n    dplyr::arrange(dplyr::desc(lower))\n  return(lane_cutoffs)\n})\ncounter_A = 0\npurrr::map(bb_list_ck, function(block_bounds_list){\n  counter_A <<- counter_A + 1\n  # set file name\n  file_name = paste(\"20210803_ck_karyoplot_\", names(bb_list)[counter_A], \".png\", sep = \"\")\n  file_out = here::here(\"docs/plots\", file_name)\n  \n  # Get lane cutoffs\n  lane_cutoffs = lc_list_ck[[counter_A]]\n  \n  png(file=file_out,\n      width=13000,\n      height=3000,\n      units = \"px\",\n      res = 300)\n  \n  # Plot ideogram\n  kp = karyoploteR::plotKaryotype(med_genome, plot.type = 5)\n  # Add data background\n  #karyoploteR::kpDataBackground(kp, r0=0, r1 = 1, color = \"white\")\n  \n  # Add rectangles in loop\n  counter_B = 0\n  purrr::map(block_bounds_list, function(LANE){\n    # Add to counter_B\n    counter_B <<- counter_B + 1\n    # Add rectangles\n    karyoploteR::kpRect(kp,\n                        chr = LANE$chr,\n                        x0 = LANE$END_PREV,\n                        x1 = LANE$BIN_END,\n                        y0 = lane_cutoffs[counter_B, ] %>% \n                          dplyr::pull(lower),\n                        y1 = lane_cutoffs[counter_B, ] %>% \n                          dplyr::pull(upper),\n                        col = LANE$COLOUR,\n                        border = NA)\n    # Add axis label\n    karyoploteR::kpAddLabels(kp, labels = unique(LANE$LANE),\n                             r0 = lane_cutoffs[counter_B, ] %>% \n                               dplyr::pull(lower),\n                             r1 = lane_cutoffs[counter_B, ] %>% \n                               dplyr::pull(upper),\n                             cex = 0.5)\n  })\n  \n  \n  dev.off()  \n})\nknitr::include_graphics(here::here(\"docs/plots/20210803_ck_karyoplot_5000.png\"))"},{"path":"parts.html","id":"parts","chapter":"4 Parts","heading":"4 Parts","text":"can add parts organize one book chapters together. Parts can inserted top .Rmd file, first-level chapter heading file.Add numbered part: # (PART) Act one {-} (followed # chapter)Add unnumbered part: # (PART\\*) Act one {-} (followed # chapter)Add appendix special kind un-numbered part: # (APPENDIX) stuff {-} (followed # chapter). Chapters appendix prepended letters instead numbers.","code":""},{"path":"footnotes-and-citations.html","id":"footnotes-and-citations","chapter":"5 Footnotes and citations","heading":"5 Footnotes and citations","text":"","code":""},{"path":"footnotes-and-citations.html","id":"footnotes","chapter":"5 Footnotes and citations","heading":"5.1 Footnotes","text":"Footnotes put inside square brackets caret ^[]. Like one.2","code":""},{"path":"footnotes-and-citations.html","id":"citations","chapter":"5 Footnotes and citations","heading":"5.2 Citations","text":"Reference items bibliography file(s) using @key.example, using bookdown package3 (check last code chunk index.Rmd see citation key added) sample book, built top R Markdown knitr4 (citation added manually external file book.bib).\nNote .bib files need listed index.Rmd YAML bibliography key.bs4_book theme makes footnotes appear inline click . example book, added csl: chicago-fullnote-bibliography.csl index.Rmd YAML, include .csl file. download new style, recommend: https://www.zotero.org/styles/RStudio Visual Markdown Editor can also make easier insert citations: https://rstudio.github.io/visual-markdown-editing/#/citations","code":""},{"path":"blocks.html","id":"blocks","chapter":"6 Blocks","heading":"6 Blocks","text":"","code":""},{"path":"blocks.html","id":"equations","chapter":"6 Blocks","heading":"6.1 Equations","text":"equation.\\[\\begin{equation} \n  f\\left(k\\right) = \\binom{n}{k} p^k\\left(1-p\\right)^{n-k}\n  \\tag{6.1}\n\\end{equation}\\]may refer using \\@ref(eq:binom), like see Equation (6.1).","code":""},{"path":"blocks.html","id":"theorems-and-proofs","chapter":"6 Blocks","heading":"6.2 Theorems and proofs","text":"Labeled theorems can referenced text using \\@ref(thm:tri), example, check smart theorem 6.1.Theorem 6.1  right triangle, \\(c\\) denotes length hypotenuse\n\\(\\) \\(b\\) denote lengths two sides, \n\\[^2 + b^2 = c^2\\]Read https://bookdown.org/yihui/bookdown/markdown-extensions--bookdown.html.","code":""},{"path":"blocks.html","id":"callout-blocks","chapter":"6 Blocks","heading":"6.3 Callout blocks","text":"bs4_book theme also includes special callout blocks, like .rmdnote.can use markdown inside block.user define appearance blocks LaTeX output.may also use: .rmdcaution, .rmdimportant, .rmdtip, .rmdwarning block name.R Markdown Cookbook provides help use custom blocks design callouts: https://bookdown.org/yihui/rmarkdown-cookbook/custom-blocks.html","code":"\nhead(beaver1, n = 5)\n#>   day time  temp activ\n#> 1 346  840 36.33     0\n#> 2 346  850 36.34     0\n#> 3 346  900 36.35     0\n#> 4 346  910 36.42     0\n#> 5 346  920 36.55     0"},{"path":"sharing-your-book.html","id":"sharing-your-book","chapter":"7 Sharing your book","heading":"7 Sharing your book","text":"","code":""},{"path":"sharing-your-book.html","id":"publishing","chapter":"7 Sharing your book","heading":"7.1 Publishing","text":"HTML books can published online, see: https://bookdown.org/yihui/bookdown/publishing.html","code":""},{"path":"sharing-your-book.html","id":"pages","chapter":"7 Sharing your book","heading":"7.2 404 pages","text":"default, users directed 404 page try access webpage found. ’d like customize 404 page instead using default, may add either _404.Rmd _404.md file project root use code /Markdown syntax.","code":""},{"path":"sharing-your-book.html","id":"metadata-for-sharing","chapter":"7 Sharing your book","heading":"7.3 Metadata for sharing","text":"Bookdown HTML books provide HTML metadata social sharing platforms like Twitter, Facebook, LinkedIn, using information provide index.Rmd YAML. setup, set url book path cover-image file. book’s title description also used.bs4_book provides enhanced metadata social sharing, chapter shared unique description, auto-generated based content.Specify book’s source repository GitHub repo _output.yml file, allows users view chapter’s source file suggest edit. Read features output format :https://pkgs.rstudio.com/bookdown/reference/bs4_book.htmlOr use:","code":"\n?bookdown::bs4_book"},{"path":"references.html","id":"references","chapter":"References","heading":"References","text":"","code":""}]
