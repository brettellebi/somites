include: "rules/00_1_common.smk"
include: "rules/00_2_common.smk"
##### Modules #####

include: "rules/01_ref.smk"
include: "rules/02_1_F0_mapping.smk"
include: "rules/02_2_F0_calling.smk"
include: "rules/03_1_F1_mapping.smk"
include: "rules/03_2_F1_calling.smk"
include: "rules/04_trio_homozygosity.smk"
include: "rules/05_1_F2_mapping.smk"
include: "rules/05_2_F2_calling.smk"
include: "rules/06_1_GWAS_GCTA.smk"
include: "rules/06_2_GWAS_GCTA_split_invnorm.smk"
include: "rules/06_3_GWAS_GCTA_split_microscope.smk"
include: "rules/06_4_GWAS_GCTA_micr-adj.smk"
include: "rules/07_annotations.smk"
include: "rules/08_extra.smk"
#include: "rules/05_F2_recomb_blocks.smk"
##include: "rules/06_F0_recomb_blocks.smk"
#include: "rules/07_1_GridLMM.smk"
#include: "rules/08_F2_calling.smk"
#include: "rules/09_TIGER.smk"

##### Target rules #####

rule all:
    input:
################
## 00_common.smk
################
## create_f1_samples_file
#        config["F1_samples"],
## create_f2_samples_file
#        config["F2_samples"],
################
## 01_ref.smk
################
#        expand(rules.get_genome.output,
#                ref = config["refs"]
#        ),
#        expand(rules.genome_faidx.output,
#                ref = config["refs"]
#        ),
#        expand(rules.genome_dict.output,
#                ref = config["refs"]
#        ),
#        expand(rules.bwa_mem2_index.output,
#                ref = config["refs"]
#        ),
#        expand(rules.get_chrom_lengths.output,
#                ref = config["refs"]
#        ),
################
## 02_2_F0_calling.smk
################
#        expand(rules.merge_variants.output,
#                ref = config["refs"]
#        ),
        expand(rules.convert_F0_to_fasta.output,
                ref = config["refs"],
                F0_sample = "Kaga"
        ),
################
## 03_1_F1_mapping.smk
################
#        expand(rules.samtools_index_F1.output,
#                ref = config["refs"],
#                F1_sample = F1_samples['SAMPLE']
#        ),
################
## 03_2_F1_calling.smk
################
#        expand(rules.merge_variants_F0_and_F1.output,
#                ref = config["refs"]
#        ),
################
## 04_trio_homozygosity.smk
################
#        expand(rules.extract_trio_genos.output,
#                ref = config["refs"]
#        ),
#        expand(rules.extract_trio_snps.output,
#                ref = config["refs"]
#        ),
#        expand(rules.trio_gt_counts_in_bins.output,
#                ref = config["refs"],
#                sample = ["Cab", "Kaga", "F1"],
#                bin_length = 5000
#        ),
#        expand(rules.circos_homozygosity.output.plot,
#                ref = config["refs"],
#                bin_length = 5000,
#                sample = ["Cab", "Kaga", "F1"]
#        ),
#        expand(rules.extract_homo_div_snps.output.sites,
#                ref = config["refs"]
#        ),
#        expand(rules.plot_SNP_counts_per_chr.output,
#                ref = "hdrr"
#        ),
################
## 05_1_F2_mapping.smk
################
#        expand(rules.samtools_index_F2.output,
#                ref = "hdrr",
#                F2_sample = F2_samples['SAMPLE']
#        ),
################
## 05_2_F2_calling.smk
################
#        expand(rules.make_dp_AB_F2.output,
#                ref = "hdrr",
#                F2_sample = F2_samples['SAMPLE']
#        ),
#        expand(rules.make_hmm_input.output,
#                ref = "hdrr",
#                max_reads = config["max_reads_hmm"],
#                bin_length = config["bin_length"]
#        ),
#        expand(rules.test_hmmlearn.output.pck,
#                ref = "hdrr",
#                max_reads = "None",
#                bin_length = "5000",
#                mod = config["mods"]               
#        ),
#        expand(rules.plot_hmmlearn.output.scatter,
#                ref = "hdrr",
#                max_reads = "None",
#                bin_length = "5000",
#                mod = config["mods"]
#        ),
#        expand(rules.true_hmmlearn.output.csv,
#                ref = "hdrr",
#                max_reads = "None",
#                bin_length = "5000",
#                cov = config["hmm_covariance"]
#        ),
#        expand(rules.plot_true_hmmlearn.output,
#                ref = "hdrr",
#                max_reads = "None",
#                bin_length = "5000",
#                cov = config["hmm_covariance"]
#        ),
#        expand(rules.reporter_concordance.output,
#                ref = "hdrr",
#                max_reads = "None",
#                bin_length = "5000",
#                cov = config["hmm_covariance"]
#        ),
################
## 06_GWAS_GCTA.smk
################
#        expand(rules.create_ped.output,
#                ref = "hdrr",
#                max_reads = "None",
#                bin_length = "5000",
#                cov = config["hmm_covariance"]
#        ),
#        expand(rules.create_bed.output,
#                ref = "hdrr",
#                max_reads = "None",
#                bin_length = "5000",
#                cov = config["hmm_covariance"]
#        ),
#        expand(rules.create_phen.output,
#                phenotype = config["target_phenotypes"]
#        ),
#        expand(rules.permute_phen.output,
#                phenotype = config["target_phenotypes"],
#                seed = PERM_SEEDS
#        ),
#        expand(rules.create_covar.output,
#                covars = config["covariates"][1:] #NOTE: important not to include first covariate ("None")
#        ),
#        expand(rules.permute_covar.output,
#                covars = config["covariates"][1:], #NOTE: important not to include first covariate ("None")
#                seed = PERM_SEEDS
#        ),
#        rules.create_excluded_samples_list.output,
#        expand(rules.run_mlma_loco.output,
#                ref = "hdrr",
#                max_reads = "None",
#                bin_length = "5000",
#                cov = config["hmm_covariance"],
#                phenotype = config["target_phenotypes"],
#                covars = config["covariates"]
#        ),
#        expand(rules.run_mlma_loco_permuted.output,
#                ref = "hdrr",
#                max_reads = "None",
#                bin_length = "5000",
#                cov = config["hmm_covariance"],
#                phenotype = config["target_phenotypes"],
#                covars = config["covariates"],
#                seed = PERM_SEEDS
#        ),
#        expand(rules.get_min_p_perms.output,
#                ref = "hdrr",
#                max_reads = "None",
#                bin_length = "5000",
#                cov = config["hmm_covariance"],
#                phenotype = config["target_phenotypes"],
#                covars = config["covariates"],                
#        ),
#        expand(rules.get_manhattan_gcta.output,
#                ref = "hdrr",
#                max_reads = "None",
#                bin_length = "5000",
#                cov = config["hmm_covariance"],
#                phenotype = config["target_phenotypes"],
#                covars = config["covariates"]        
#        ),
################
## 06_GWAS_GCTA_split_invnorm.smk
################
#        expand(rules.split_inv_norm_pheno.output,
#                phenotype = "intercept"
#        ),
#        expand(rules.permute_invnorm_phen.output,
#                phenotype = "intercept",
#                seed = PERM_SEEDS
#        ),
#        expand(rules.run_mlma_loco_invnorm.output,
#                ref = "hdrr",
#                max_reads = "None",
#                bin_length = "5000",
#                cov = config["hmm_covariance"],
#                phenotype = "intercept"
#        ),
#        expand(rules.run_mlma_loco_invnorm_permuted.output,
#                ref = "hdrr",
#                max_reads = "None",
#                bin_length = "5000",
#                cov = config["hmm_covariance"],
#                phenotype = "intercept",
#                seed = PERM_SEEDS
#        ),
#        expand(rules.get_min_p_perms_invnorm.output,
#                ref = "hdrr",
#                max_reads = "None",
#                bin_length = "5000",
#                cov = config["hmm_covariance"],
#                phenotype = "intercept",
#        ),
#        expand(rules.get_manhattan_gcta_invnorm.output,
#                ref = "hdrr",
#                max_reads = "None",
#                bin_length = "5000",
#                cov = config["hmm_covariance"],
#                phenotype = "intercept"
#        ),
################
## 07_annotations.smk
################
#        expand(rules.get_annotations_invnorm.output,
#                ref = "hdrr",
#                max_reads = "None",
#                bin_length = "5000",
#                cov = 0.8,
#                phenotype = "intercept"                
#        ),
#        expand(rules.get_annotations_psm.output,
#                ref = "hdrr",
#                max_reads = "None",
#                bin_length = "5000",
#                cov = 0.8,
#                phenotype = "unsegmented_psm_area",
#                covars = "None"              
#        ),
#        expand(rules.run_vep_invnorm.output,
#                ref = "hdrr",
#                max_reads = "None",
#                bin_length = "5000",
#                cov = 0.8,
#                phenotype = "intercept"       
#        ),
#        expand(rules.run_vep_psm.output,
#                ref = "hdrr",
#                max_reads = "None",
#                bin_length = "5000",
#                cov = 0.8,
#                phenotype = "unsegmented_psm_area",
#                covars = "None"    
#        ),       
################
## 06_3_GWAS_GCTA_split_microscope.smk
################
#        expand(rules.split_pheno_by_microscope.output,
#                phenotype = "intercept",
#                microscope = config["microscopes"]
#        ),
#        expand(rules.split_bed.output,
#                ref = "hdrr",
#                max_reads = "None",
#                bin_length = "5000",
#                cov = config["hmm_covariance"],
#                phenotype = "intercept",
#                microscope = config["microscopes"]
#        ),
#        expand(rules.permute_split_microscope_phen.output,
#                phenotype = "intercept",
#                microscope = config["microscopes"],
#                seed = PERM_SEEDS
#        ),
#        expand(rules.run_mlma_loco_split_microscope.output,
#                ref = "hdrr",
#                max_reads = "None",
#                bin_length = "5000",
#                cov = config["hmm_covariance"],
#                phenotype = "intercept",
#                microscope = config["microscopes"]
#        ),
#        expand(rules.run_mlma_loco_split_microscope_permuted.output,
#                ref = "hdrr",
#                max_reads = "None",
#                bin_length = "5000",
#                cov = config["hmm_covariance"],
#                phenotype = "intercept",
#                microscope = config["microscopes"],
#                seed = PERM_SEEDS
#        ),
#        expand(rules.get_min_p_perms_split_microscope.output,
#                ref = "hdrr",
#                max_reads = "None",
#                bin_length = "5000",
#                cov = config["hmm_covariance"],
#                phenotype = "intercept",
#                microscope = config["microscopes"]
#        ),
#        expand(rules.get_manhattan_gcta_split_microscope.output,
#                ref = "hdrr",
#                max_reads = "None",
#                bin_length = "5000",
#                cov = config["hmm_covariance"],
#                phenotype = "intercept",
#                microscope = config["microscopes"]
#        ),
################
## 06_4_GWAS_GCTA_micr-adj.smk
################
#        expand(rules.get_manhattan_gcta_micr_adj.output,
#                ref = "hdrr",
#                max_reads = "None",
#                bin_length = "5000",
#                cov = 0.8,
#                phenotype = "intercept",
#        ),
################
## 08_extra.smk
################
#        expand(rules.top_and_bottom_karyos.output,
#                ref = "hdrr",
#                max_reads = "None",
#                bin_length = "5000",
#                cov = 0.8,
#                phenotype = "intercept"
#        ),
#        expand(rules.kaga_F0_chr3.output,
#                ref = "hdrr",
#                max_reads = "None",
#                bin_length = "5000",
#                cov = 0.8,
#                phenotype = "intercept",
#                sample = "Kaga"
#        ),
#        expand(rules.F2_chr3_pheno_by_gt.output,
#                ref = "hdrr",
#                max_reads = "None",
#                bin_length = "5000",
#                cov = 0.8,
#                phenotype = "intercept",
#        ),
        rules.phenotype_plots.output,
