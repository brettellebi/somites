[{"path":"index.html","id":"about","chapter":"1 About","heading":"1 About","text":"book sets analysis somite development periods, Ali Ahmed Seleit Aulehla Group EMBL Heidelberg.\nFigure 1.1: Video Ali Ahmed Seleit\n","code":""},{"path":"alignment-of-f0-and-f2-generations.html","id":"alignment-of-f0-and-f2-generations","chapter":"2 Alignment of F0 and F2 generations","heading":"2 Alignment of F0 and F2 generations","text":"code used process data using Snakemake1 can found :Config:https://github.com/brettellebi/somites/tree/master/configConfig:https://github.com/brettellebi/somites/tree/master/configWorkflow:https://github.com/brettellebi/somites/tree/master/workflowWorkflow:https://github.com/brettellebi/somites/tree/master/workflow","code":""},{"path":"homozygosity-of-f0-cab-and-kaga.html","id":"homozygosity-of-f0-cab-and-kaga","chapter":"3 Homozygosity of F0 Cab and Kaga","heading":"3 Homozygosity of F0 Cab and Kaga","text":"Snakefile aligning F0 samples: https://github.com/brettellebi/somites/blob/master/workflow/rules/02_F0_mapping.smkSnakefile calling F0 samples: https://github.com/brettellebi/somites/blob/master/workflow/rules/03_F0_calling.smk","code":""},{"path":"homozygosity-of-f0-cab-and-kaga.html","id":"read-in-total-medaka-genome-count","chapter":"3 Homozygosity of F0 Cab and Kaga","heading":"3.1 Read in total medaka genome count","text":"Make custom chromosome scaffold","code":"\n# Get chromosome lengths\nmed_chr_lens = read.table(here::here(\"data\",\n                                     \"Oryzias_latipes.ASM223467v1.dna.toplevel.fa_chr_counts.txt\"),\n                          col.names = c(\"chr\", \"end\"))\n# Add start\nmed_chr_lens$start = 1\n# Reorder\nmed_chr_lens = med_chr_lens %>% \n  dplyr::select(chr, start, end) %>% \n  # remove MT\n  dplyr::filter(chr != \"MT\")\n\n# Total HdrR sequence length\ntotal_hdrr_bases = sum(med_chr_lens$end)\n##Create custom genome \nmed_genome = regioneR::toGRanges(med_chr_lens)"},{"path":"homozygosity-of-f0-cab-and-kaga.html","id":"read-in-data","chapter":"3 Homozygosity of F0 Cab and Kaga","heading":"3.2 Read in data","text":"","code":"\nin_dir = \"/nfs/research/birney/users/ian/somites/recombination_blocks\"\n\nin_files = list.files(in_dir, pattern = \"20210803_hmm_output_F0\", full.names = T)\n\n# Read into list\nck_list = purrr::map(in_files, function(FILE){\n  out = readr::read_tsv(FILE,\n                        col_types = \"ciiidii\")\n})\n# Set names as bin length\nnames(ck_list) = basename(in_files) %>% \n  stringr::str_split(\"_\", simplify = T) %>% \n  subset(select = 6) %>% \n  stringr::str_remove(\".txt\")\n# Reorder\nck_list = ck_list[order(as.numeric(names(ck_list)))]\n\ncounter = 0\nck_list = purrr::map(ck_list, function(data){\n  counter <<- counter + 1\n  # set bin length\n  bin_length = as.numeric(names(ck_list)[counter])\n  # add bin start and end coordinates\n  df = data %>% \n    dplyr::mutate(LANE = sample %>%\n                    stringr::str_split(\"/\", simplify = T) %>% \n                    subset(select = 10),\n                  BIN_LENGTH = bin_length,\n                  BIN_START = (bin - 1) * bin_length + 1,\n                  BIN_END = bin * bin_length,\n                  BIN_LENGTH_KB = BIN_LENGTH / 1e3,\n                  READS_PER_BIN = mat + pat)\n  return(df)\n})\n\n# Recode `ck_list$state` so that 0,1,2 corresponds to HOM_REF, HET, HOM_ALT \nck_list = purrr::map(ck_list, function(df){\n  df = df %>% \n    dplyr::mutate(state = dplyr::recode(state,\n                                        `0` = 2,\n                                        `1` = 1,\n                                        `2` = 0))\n})"},{"path":"homozygosity-of-f0-cab-and-kaga.html","id":"get-total-number-of-bases-covered-by-each-state","chapter":"3 Homozygosity of F0 Cab and Kaga","heading":"3.2.1 Get total number of bases covered by each state","text":"Plot","code":"\n# Take 5kb DF\ndf = ck_list$`5000`\n\n# Set states to loop over\nstates = 0:2\nnames(states) = states\n\n# Run loop over each LANE\n\nbase_cov_df = df %>% \n  split(., f = .$LANE) %>% \n  purrr::map(., function(LANE){\n    # convert to ranges object\n    lane_ranges = GenomicRanges::makeGRangesFromDataFrame(LANE,\n                                                          keep.extra.columns = T,\n                                                          ignore.strand = T,\n                                                          seqnames.field = \"chr\", \n                                                          start.field = \"BIN_START\",\n                                                          end.field = \"BIN_END\")\n    # get total bases covered by each state\n    purrr::map_dfr(states, function(STATE){\n      lane_ranges[lane_ranges$state == STATE] %>% \n        # merge contiguous ranges\n        GenomicRanges::reduce(.) %>% \n        # get width of ranges\n        width(.) %>% \n        # get total bases covered\n        sum(.) %>% \n        # coerce into data frame\n        data.frame(\"BASES_COVERED\" = .)\n      }, .id = \"STATE\") %>% \n        # add FREQ column\n        dplyr::mutate(FREQ = BASES_COVERED / total_hdrr_bases) %>% \n        # add UNCLASSIFIED row\n        tibble::add_row(STATE = \"UNCLASSIFIED\", \n                        BASES_COVERED = total_hdrr_bases - sum(.$BASES_COVERED),\n                        FREQ = (total_hdrr_bases - sum(.$BASES_COVERED)) / total_hdrr_bases)\n    }\n  ) %>% \n  dplyr::bind_rows(.id = \"LANE\")\n# Plot\nck_prop_plot = base_cov_df %>% \n  dplyr::mutate(STATE = factor(STATE, levels = c(0,1,2, \"UNCLASSIFIED\")),\n                #STATE_RECODE = dplyr::recode(STATE,\n                #                             `0` = \"HOM REF (HdrR)\",\n                #                             `1` = \"HET\",\n                #                             `2` = \"HOM ALT\",\n                #                             \"UNCLASSIFIED\" = \"Unclassified\")\n                ) %>% \n  # plot\n  ggplot(aes(STATE, FREQ, colour = STATE, fill = STATE)) +\n    geom_col() +\n    facet_grid(cols = vars(LANE)) +\n    theme_bw() +\n    scale_colour_manual(values = pal_hom_het_2_lines) +\n    scale_fill_manual(values = pal_hom_het_2) +\n    guides(colour = \"none\", fill = \"none\") +\n    xlab(\"Genotype\") +\n    ylab(\"Proportion of reference bases covered\")\n\nck_prop_plot\n\n# Interactive version\nggplotly(ck_prop_plot)"},{"path":"homozygosity-of-f0-cab-and-kaga.html","id":"karyoplot","chapter":"3 Homozygosity of F0 Cab and Kaga","heading":"3.3 Karyoplot","text":"Extract y cutoff points yPlot Karyoplots\nFigure 3.1: Bin length: 5 kb\n","code":"\nbb_list_ck = purrr::map(ck_list, function(df){\n  # loop over different bin lengths\n  block_bounds_list = df %>% \n    # loop over LANE\n    split(., f = .$LANE) %>% \n    purrr::map(., function(LANE){\n      # loop over CHR\n      LANE %>% \n        split(., f = .$chr) %>% \n        purrr::map(., function(CHR){\n          # Get lengths of each contiguous state\n          cont_len = rle(CHR$state)\n          \n          # Get cumulative sum of those lengths\n          cum_blocks = cumsum(cont_len$lengths)\n          \n          # Get rows that correspond to block changes\n          block_bounds = CHR[cum_blocks, ] %>% \n            # Add end of previous black\n            dplyr::mutate(END_PREV = dplyr::lag(BIN_END)) %>% \n            # Replace the NA in the first row with `1`\n            dplyr::mutate(END_PREV = tidyr::replace_na(END_PREV, 1)) %>% \n            # Add colour\n            dplyr::mutate(COLOUR = dplyr::recode(state,\n                                                 !!!pal_hom_het_2[-which(names(pal_hom_het_2) == \"UNCLASSIFIED\")])) \n          \n        }) %>% \n            dplyr::bind_rows()\n      \n  })\n})\nlc_list_ck = purrr::map(bb_list_ck, function(block_bounds_list){\n  lane_cutoffs = cut(0:1, breaks = length(block_bounds_list)) %>% \n    levels(.) %>% \n    data.frame(lower = as.numeric( sub(\"\\\\((.+),.*\", \"\\\\1\", .) ),\n               upper = as.numeric( sub(\"[^,]*,([^]]*)\\\\]\", \"\\\\1\", .) )) %>% \n    dplyr::arrange(dplyr::desc(lower))\n  return(lane_cutoffs)\n})\ncounter_A = 0\npurrr::map(bb_list_ck, function(block_bounds_list){\n  counter_A <<- counter_A + 1\n  # set file name\n  file_name = paste(\"20210803_ck_karyoplot_\", names(bb_list_ck)[counter_A], \".png\", sep = \"\")\n  file_out = here::here(\"docs/plots\", file_name)\n  \n  # Get lane cutoffs\n  lane_cutoffs = lc_list_ck[[counter_A]]\n  \n  png(file=file_out,\n      width=13000,\n      height=3000,\n      units = \"px\",\n      res = 300)\n  \n  # Plot ideogram\n  kp = karyoploteR::plotKaryotype(med_genome, plot.type = 5)\n  # Add data background\n  #karyoploteR::kpDataBackground(kp, r0=0, r1 = 1, color = \"white\")\n  \n  # Add rectangles in loop\n  counter_B = 0\n  purrr::map(block_bounds_list, function(LANE){\n    # Add to counter_B\n    counter_B <<- counter_B + 1\n    # Add rectangles\n    karyoploteR::kpRect(kp,\n                        chr = LANE$chr,\n                        x0 = LANE$END_PREV,\n                        x1 = LANE$BIN_END,\n                        y0 = lane_cutoffs[counter_B, ] %>% \n                          dplyr::pull(lower),\n                        y1 = lane_cutoffs[counter_B, ] %>% \n                          dplyr::pull(upper),\n                        col = LANE$COLOUR,\n                        border = NA)\n    # Add axis label\n    karyoploteR::kpAddLabels(kp, labels = unique(LANE$LANE),\n                             r0 = lane_cutoffs[counter_B, ] %>% \n                               dplyr::pull(lower),\n                             r1 = lane_cutoffs[counter_B, ] %>% \n                               dplyr::pull(upper),\n                             cex = 0.5)\n  })\n  \n  \n  dev.off()  \n})\nknitr::include_graphics(here::here(\"book/plots/20210803_ck_karyoplot_5000.png\"))"},{"path":"homozygosity-of-f0-cab-and-kaga.html","id":"update","chapter":"3 Homozygosity of F0 Cab and Kaga","heading":"3.4 20211110 update","text":"Changes:Used homozgygous-divergent Cab-Kaga sites instead sites F0 VCFFiltered reads overlapped repeat regions","code":""},{"path":"homozygosity-of-f0-cab-and-kaga.html","id":"read-in-data-1","chapter":"3 Homozygosity of F0 Cab and Kaga","heading":"3.4.1 Read in data","text":"","code":"\nin_dir = \"/nfs/research/birney/users/ian/somites/recombination_blocks/F0/no_repeat_reads\"\n\nin_files = list.files(in_dir, full.names = T)\n\n# Read into list\nck_list = purrr::map(in_files, function(FILE){\n  out = readr::read_tsv(FILE,\n                        col_types = \"ciiidii\")\n})\n# Set names as bin length\nnames(ck_list) = basename(in_files) %>%\n  stringr::str_remove(\".txt\")\n# Reorder\nck_list = ck_list[order(as.numeric(names(ck_list)))]\n\ncounter = 0\nck_list = purrr::map(ck_list, function(data){\n  counter <<- counter + 1\n  # set bin length\n  bin_length = as.numeric(names(ck_list)[counter])\n  # add bin start and end coordinates\n  df = data %>% \n    dplyr::mutate(LANE = sample %>%\n                    basename() %>% \n                    stringr::str_remove(\".txt\"),\n                  BIN_LENGTH = bin_length,\n                  BIN_START = (bin - 1) * bin_length + 1,\n                  BIN_END = bin * bin_length,\n                  BIN_LENGTH_KB = BIN_LENGTH / 1e3,\n                  READS_PER_BIN = mat + pat)\n  return(df)\n})\n\n# Recode `ck_list$state` so that 0,1,2 corresponds to Cab, Het, Kaga \nck_list = purrr::map(ck_list, function(df){\n  df = df %>% \n    dplyr::mutate(state = dplyr::recode(state,\n                                        `0` = 2,\n                                        `1` = 1,\n                                        `2` = 0))\n})"},{"path":"homozygosity-of-f0-cab-and-kaga.html","id":"get-total-number-of-bases-covered-by-each-state-1","chapter":"3 Homozygosity of F0 Cab and Kaga","heading":"3.4.2 Get total number of bases covered by each state","text":"Plot","code":"\n# Take 5kb DF\ndf = ck_list$`5000`\n\n# Set states to loop over\nstates = 0:2 ; names(states) = states\n\n# Run loop over each LANE\n\nbase_cov_df = df %>% \n  split(., f = .$LANE) %>% \n  purrr::map(., function(LANE){\n    # convert to ranges object\n    lane_ranges = GenomicRanges::makeGRangesFromDataFrame(LANE,\n                                                          keep.extra.columns = T,\n                                                          ignore.strand = T,\n                                                          seqnames.field = \"chr\", \n                                                          start.field = \"BIN_START\",\n                                                          end.field = \"BIN_END\")\n    # get total bases covered by each state\n    purrr::map_dfr(states, function(STATE){\n      lane_ranges[lane_ranges$state == STATE] %>% \n        # merge contiguous ranges\n        GenomicRanges::reduce(.) %>% \n        # get width of ranges\n        width(.) %>% \n        # get total bases covered\n        sum(.) %>% \n        # coerce into data frame\n        data.frame(\"BASES_COVERED\" = .)\n      }, .id = \"STATE\") %>% \n        # add FREQ column\n        dplyr::mutate(FREQ = BASES_COVERED / total_hdrr_bases) %>% \n        # add UNCLASSIFIED row\n        tibble::add_row(STATE = \"UNCLASSIFIED\", \n                        BASES_COVERED = total_hdrr_bases - sum(.$BASES_COVERED),\n                        FREQ = (total_hdrr_bases - sum(.$BASES_COVERED)) / total_hdrr_bases)\n    }\n  ) %>% \n  dplyr::bind_rows(.id = \"LANE\")\n# Plot\nck_prop_plot = base_cov_df %>% \n  dplyr::mutate(STATE = factor(STATE, levels = c(0,1,2, \"UNCLASSIFIED\"))) %>% \n  # plot\n  ggplot(aes(STATE, FREQ, colour = STATE, fill = STATE)) +\n    geom_col() +\n    facet_grid(cols = vars(LANE)) +\n    theme_bw(base_size = 9) +\n    scale_colour_manual(values = pal_hom_het_2_lines) +\n    scale_fill_manual(values = pal_hom_het_2) +\n    guides(colour = \"none\", fill = \"none\") +\n    xlab(\"Genotype\") +\n    ylab(\"Proportion of reference bases covered\")\n\nck_prop_plot\n\n# Interactive version\nggplotly(ck_prop_plot)"},{"path":"homozygosity-of-f0-cab-and-kaga.html","id":"karyoplot-1","chapter":"3 Homozygosity of F0 Cab and Kaga","heading":"3.4.3 Karyoplot","text":"Extract y cutoff points yPlot Karyoplots\nFigure 3.2: Bin length: 5 kb\n","code":"\nbb_list_ck = purrr::map(ck_list, function(df){\n  # loop over different bin lengths\n  block_bounds_list = df %>% \n    # loop over LANE\n    split(., f = .$LANE) %>% \n    purrr::map(., function(LANE){\n      # loop over CHR\n      LANE %>% \n        split(., f = .$chr) %>% \n        purrr::map(., function(CHR){\n          # Get lengths of each contiguous state\n          cont_len = rle(CHR$state)\n          \n          # Get cumulative sum of those lengths\n          cum_blocks = cumsum(cont_len$lengths)\n          \n          # Get rows that correspond to block changes\n          block_bounds = CHR[cum_blocks, ] %>% \n            # Add end of previous black\n            dplyr::mutate(END_PREV = dplyr::lag(BIN_END)) %>% \n            # Replace the NA in the first row with `1`\n            dplyr::mutate(END_PREV = tidyr::replace_na(END_PREV, 1)) %>% \n            # Add colour\n            dplyr::mutate(COLOUR = dplyr::recode(state,\n                                                 !!!pal_hom_het_2[-which(names(pal_hom_het_2) == \"UNCLASSIFIED\")])) \n          \n        }) %>% \n            dplyr::bind_rows()\n      \n  })\n})\nlc_list_ck = purrr::map(bb_list_ck, function(block_bounds_list){\n  lane_cutoffs = cut(0:1, breaks = length(block_bounds_list)) %>% \n    levels(.) %>% \n    data.frame(lower = as.numeric( sub(\"\\\\((.+),.*\", \"\\\\1\", .) ),\n               upper = as.numeric( sub(\"[^,]*,([^]]*)\\\\]\", \"\\\\1\", .) )) %>% \n    dplyr::arrange(dplyr::desc(lower))\n  return(lane_cutoffs)\n})\ncounter_A = 0\npurrr::map(bb_list_ck, function(block_bounds_list){\n  counter_A <<- counter_A + 1\n  # set file name\n  file_name = paste(\"20211110_ck_karyoplot_\", names(bb_list_ck)[counter_A], \".png\", sep = \"\")\n  file_out = here::here(\"book/plots\", file_name)\n  \n  # Get lane cutoffs\n  lane_cutoffs = lc_list_ck[[counter_A]]\n  \n  png(file=file_out,\n      width=13000,\n      height=3000,\n      units = \"px\",\n      res = 300)\n  \n  # Plot ideogram\n  kp = karyoploteR::plotKaryotype(med_genome, plot.type = 5)\n  # Add data background\n  #karyoploteR::kpDataBackground(kp, r0=0, r1 = 1, color = \"white\")\n  \n  # Add rectangles in loop\n  counter_B = 0\n  purrr::map(block_bounds_list, function(LANE){\n    # Add to counter_B\n    counter_B <<- counter_B + 1\n    # Add rectangles\n    karyoploteR::kpRect(kp,\n                        chr = LANE$chr,\n                        x0 = LANE$END_PREV,\n                        x1 = LANE$BIN_END,\n                        y0 = lane_cutoffs[counter_B, ] %>% \n                          dplyr::pull(lower),\n                        y1 = lane_cutoffs[counter_B, ] %>% \n                          dplyr::pull(upper),\n                        col = LANE$COLOUR,\n                        border = NA)\n    # Add axis label\n    karyoploteR::kpAddLabels(kp, labels = unique(LANE$LANE),\n                             r0 = lane_cutoffs[counter_B, ] %>% \n                               dplyr::pull(lower),\n                             r1 = lane_cutoffs[counter_B, ] %>% \n                               dplyr::pull(upper),\n                             cex = 0.5)\n  })\n  \n  \n  dev.off()  \n})\nknitr::include_graphics(here::here(\"book/plots/20211110_ck_karyoplot_5000.png\"))"},{"path":"homozygosity-of-f0-cab-and-kaga.html","id":"without-filling-in-empty-blocks","chapter":"3 Homozygosity of F0 Cab and Kaga","heading":"3.4.4 Without filling in empty blocks","text":"Plot Karyoplots\nFigure 3.3: Bin length: 5 kb\n","code":"\ncounter = 0\nbb_list_ck_wunc = purrr::map(ck_list, function(df){\n  counter <<- counter + 1\n  \n  BIN_LENGTH = names(ck_list)[counter] %>% \n    as.numeric()\n  # loop over different bin lengths\n  block_bounds_list = df %>% \n    # loop over LANE\n    split(., f = .$LANE) %>% \n    purrr::map(., function(LANE){\n    \n      STRAIN = unique(LANE$LANE)\n      # Create list of possible bins\n      poss_bins = purrr::map(med_chr_lens$chr, function(CHR){\n        # Get chr end\n        CHR_END = med_chr_lens %>% \n          dplyr::filter(chr == CHR) %>% \n          dplyr::pull(end) %>% \n          as.numeric()\n        # Get bin starts\n        out = tibble::tibble(chr = as.numeric(CHR),\n                             BIN_START = seq(from = 1, to = CHR_END, by = BIN_LENGTH),\n                             BIN_END = BIN_START + BIN_LENGTH - 1\n        )\n        # Adjust final bin end \n        out[nrow(out), \"BIN_END\"] = CHR_END\n        \n        return(out)\n      }) %>% \n        dplyr::bind_rows()\n    \n      \n      # Bind DF\n      new_df = dplyr::left_join(poss_bins,\n                                LANE %>% \n                                  dplyr::select(chr, BIN_START, BIN_END, state),\n                                by = c(\"chr\", \"BIN_START\", \"BIN_END\")) %>% \n        # replace NAs with `UNCLASSIFIED`\n        dplyr::mutate(state = state %>% \n                        tidyr::replace_na(\"UNCLASSIFIED\"),\n                      # add STRAIN\n                      LANE = STRAIN) %>% \n        # add COLOUR\n        dplyr::mutate(COLOUR = dplyr::recode(state,\n                                             !!!pal_hom_het_2))\n    \n              \n    })\n})\ncounter_A = 0\npurrr::map(bb_list_ck_wunc, function(block_bounds_list){\n  counter_A <<- counter_A + 1\n  # set file name\n  file_name = paste(\"20211110_ck_karyoplot_wimiss_\", names(bb_list_ck_wunc)[counter_A], \".png\", sep = \"\")\n  file_out = here::here(\"book/plots\", file_name)\n  \n  # Get lane cutoffs\n  lane_cutoffs = lc_list_ck[[counter_A]]\n  \n  png(file=file_out,\n      width=13000,\n      height=3000,\n      units = \"px\",\n      res = 300)\n  \n  # Plot ideogram\n  kp = karyoploteR::plotKaryotype(med_genome, plot.type = 5)\n  # Add data background\n  #karyoploteR::kpDataBackground(kp, r0=0, r1 = 1, color = \"white\")\n  \n  # Add rectangles in loop\n  counter_B = 0\n  purrr::map(block_bounds_list, function(LANE){\n    # Add to counter_B\n    counter_B <<- counter_B + 1\n    # Add rectangles\n    karyoploteR::kpRect(kp,\n                        chr = LANE$chr,\n                        x0 = LANE$BIN_START,\n                        x1 = LANE$BIN_END,\n                        y0 = lane_cutoffs[counter_B, ] %>% \n                          dplyr::pull(lower),\n                        y1 = lane_cutoffs[counter_B, ] %>% \n                          dplyr::pull(upper),\n                        col = LANE$COLOUR,\n                        border = NA)\n    # Add axis label\n    karyoploteR::kpAddLabels(kp, labels = unique(LANE$LANE),\n                             r0 = lane_cutoffs[counter_B, ] %>% \n                               dplyr::pull(lower),\n                             r1 = lane_cutoffs[counter_B, ] %>% \n                               dplyr::pull(upper),\n                             cex = 3.5)\n  })\n  \n  \n  dev.off()  \n})\nknitr::include_graphics(here::here(\"book/plots/20211110_ck_karyoplot_wimiss_5000.png\"))"},{"path":"f2-recombination-blocks-all-homozygous-divergent-sites.html","id":"f2-recombination-blocks-all-homozygous-divergent-sites","chapter":"4 F2 recombination blocks (all homozygous-divergent sites)","heading":"4 F2 recombination blocks (all homozygous-divergent sites)","text":"Snakefile aligning F2 samples: https://github.com/brettellebi/somites/blob/master/workflow/rules/04_F2_mapping.smkSnakefile running HMM generating figures: https://github.com/brettellebi/somites/blob/master/workflow/rules/05_F2_recomb_blocks.smk","code":"\nlibrary(here)\n#> here() starts at /hps/software/users/birney/ian/repos/somites\nsite_filter = \"all_sites\""},{"path":"f2-recombination-blocks-all-homozygous-divergent-sites.html","id":"base-coverage","chapter":"4 F2 recombination blocks (all homozygous-divergent sites)","heading":"4.1 Base coverage","text":"","code":""},{"path":"f2-recombination-blocks-all-homozygous-divergent-sites.html","id":"total","chapter":"4 F2 recombination blocks (all homozygous-divergent sites)","heading":"4.1.1 Total","text":"","code":"\nknitr::include_graphics(here::here(\"book/plots/snakemake\", site_filter, \"5000/base_cov_total.png\"))"},{"path":"f2-recombination-blocks-all-homozygous-divergent-sites.html","id":"by-chromosome","chapter":"4 F2 recombination blocks (all homozygous-divergent sites)","heading":"4.1.2 By chromosome","text":"","code":"\nknitr::include_graphics(here::here(\"book/plots/snakemake\", site_filter, \"5000/base_cov_by_chrom.png\"))"},{"path":"f2-recombination-blocks-all-homozygous-divergent-sites.html","id":"proportion-of-sites","chapter":"4 F2 recombination blocks (all homozygous-divergent sites)","heading":"4.2 Proportion of sites","text":"","code":""},{"path":"f2-recombination-blocks-all-homozygous-divergent-sites.html","id":"total-1","chapter":"4 F2 recombination blocks (all homozygous-divergent sites)","heading":"4.2.1 Total","text":"","code":"\nknitr::include_graphics(here::here(\"book/plots/snakemake\", site_filter, \"5000/prop_sites_total.png\"))"},{"path":"f2-recombination-blocks-all-homozygous-divergent-sites.html","id":"by-chromosome-1","chapter":"4 F2 recombination blocks (all homozygous-divergent sites)","heading":"4.2.2 By chromosome","text":"","code":"\nknitr::include_graphics(here::here(\"book/plots/snakemake\", site_filter, \"5000/prop_sites_by_chrom.png\"))"},{"path":"f2-recombination-blocks-all-homozygous-divergent-sites.html","id":"karyoplots","chapter":"4 F2 recombination blocks (all homozygous-divergent sites)","heading":"4.3 Karyoplots","text":"","code":""},{"path":"f2-recombination-blocks-all-homozygous-divergent-sites.html","id":"no-missing-blocks","chapter":"4 F2 recombination blocks (all homozygous-divergent sites)","heading":"4.3.1 No missing blocks","text":"","code":"\nknitr::include_graphics(here::here(\"book/plots/snakemake\", site_filter, \"5000/karyoplot_no_missing.png\"))"},{"path":"f2-recombination-blocks-all-homozygous-divergent-sites.html","id":"with-missing-blocks","chapter":"4 F2 recombination blocks (all homozygous-divergent sites)","heading":"4.3.2 With missing blocks","text":"","code":"\nknitr::include_graphics(here::here(\"book/plots/snakemake\", site_filter, \"5000/karyoplot_with_missing.png\"))"},{"path":"f2-recombination-blocks-filtered-sites.html","id":"f2-recombination-blocks-filtered-sites","chapter":"5 F2 recombination blocks (filtered sites)","heading":"5 F2 recombination blocks (filtered sites)","text":"Exclusions:reads overlapping HdrR repeat regionsreads overlapping HdrR repeat regionsregions persistent heterozygosity MIKK panelregions persistent heterozygosity MIKK panelfiltered based read count proportion Cab)filtered based read count proportion Cab)Snakefile aligning F2 samples: https://github.com/brettellebi/somites/blob/master/workflow/rules/04_F2_mapping.smkSnakefile running HMM generating figures: https://github.com/brettellebi/somites/blob/master/workflow/rules/05_F2_recomb_blocks.smk","code":"\nlibrary(here)\n#> here() starts at /hps/software/users/birney/ian/repos/somites\nsite_filter = \"no_repeat_reads_or_pers_hets_filtered_for_read_count_and_cab_prop\""},{"path":"f2-recombination-blocks-filtered-sites.html","id":"base-coverage-1","chapter":"5 F2 recombination blocks (filtered sites)","heading":"5.1 Base coverage","text":"","code":""},{"path":"f2-recombination-blocks-filtered-sites.html","id":"total-2","chapter":"5 F2 recombination blocks (filtered sites)","heading":"5.1.1 Total","text":"","code":"\nknitr::include_graphics(here::here(\"book/plots/snakemake\", site_filter, \"5000/base_cov_total.png\"))"},{"path":"f2-recombination-blocks-filtered-sites.html","id":"by-chromosome-2","chapter":"5 F2 recombination blocks (filtered sites)","heading":"5.1.2 By chromosome","text":"","code":"\nknitr::include_graphics(here::here(\"book/plots/snakemake\", site_filter, \"5000/base_cov_by_chrom.png\"))"},{"path":"f2-recombination-blocks-filtered-sites.html","id":"proportion-of-sites-1","chapter":"5 F2 recombination blocks (filtered sites)","heading":"5.2 Proportion of sites","text":"","code":""},{"path":"f2-recombination-blocks-filtered-sites.html","id":"total-3","chapter":"5 F2 recombination blocks (filtered sites)","heading":"5.2.1 Total","text":"","code":"\nknitr::include_graphics(here::here(\"book/plots/snakemake\", site_filter, \"5000/prop_sites_total.png\"))"},{"path":"f2-recombination-blocks-filtered-sites.html","id":"by-chromosome-3","chapter":"5 F2 recombination blocks (filtered sites)","heading":"5.2.2 By chromosome","text":"","code":"\nknitr::include_graphics(here::here(\"book/plots/snakemake\", site_filter, \"5000/prop_sites_by_chrom.png\"))"},{"path":"f2-recombination-blocks-filtered-sites.html","id":"karyoplots-1","chapter":"5 F2 recombination blocks (filtered sites)","heading":"5.3 Karyoplots","text":"","code":""},{"path":"f2-recombination-blocks-filtered-sites.html","id":"no-missing-blocks-1","chapter":"5 F2 recombination blocks (filtered sites)","heading":"5.3.1 No missing blocks","text":"","code":"\nknitr::include_graphics(here::here(\"book/plots/snakemake\", site_filter, \"5000/karyoplot_no_missing.png\"))"},{"path":"f2-recombination-blocks-filtered-sites.html","id":"with-missing-blocks-1","chapter":"5 F2 recombination blocks (filtered sites)","heading":"5.3.2 With missing blocks","text":"","code":"\nknitr::include_graphics(here::here(\"book/plots/snakemake\", site_filter, \"5000/karyoplot_with_missing.png\"))"},{"path":"phenotypes.html","id":"phenotypes","chapter":"6 Phenotypes","heading":"6 Phenotypes","text":"","code":"\nlibrary(tidyverse)\n# Get lighter/darker functions\nsource(\"https://gist.githubusercontent.com/brettellebi/c5015ee666cdf8d9f7e25fa3c8063c99/raw/91e601f82da6c614b4983d8afc4ef399fa58ed4b/karyoploteR_lighter_darker.R\")\n# Get palettes for phenotypes\nsource(here::here(\"book/source/04-Association_testing.R\"))\n# Get GWAS code\nsource(here::here(\"workflow/scripts/run_gwls_source.R\"))\n# Adjust palettes\nmean_pal = mean_pal[2:3]\nintercept_pal = intercept_pal[2:3]\nunsegmented_psm_pal = unsegmented_psm_area_pal[2:3]\n\nDATE_OF_ASSOC_TEST = 20220214\n\n\nPLOT_DIR = here::here(\"book/plots\", DATE_OF_ASSOC_TEST, \"phenotypes\")\ndir.create(PLOT_DIR, recursive = T, showWarnings = F)"},{"path":"phenotypes.html","id":"read-in-phenotype-data","chapter":"6 Phenotypes","heading":"6.1 Read in phenotype data","text":"","code":"\npheno_file = here::here(\"data/20220214_phenotypes.xlsx\")\nF01_pheno_file = here::here(\"data/F0_F1_period.xlsx\")\n\n# Read in F2 data\ndf = readxl::read_xlsx(pheno_file) %>% \n  # remove \"KC\" from sample name\n  dplyr::mutate(sample = fish %>% \n                  stringr::str_remove(\"KC\")) %>% \n  # add `GEN` column\n  dplyr::mutate(GEN = \"F2\")\n\n# How many F2 samples?\nlength(unique(df$sample))\n#> [1] 646\n\n# Read in F0 and F1 data\ndf_f01 = readxl::read_xlsx(F01_pheno_file) %>% \n  dplyr::mutate(sample = fish) %>% \n  dplyr::mutate(GEN = dplyr::case_when(str_detect(fish, \"^C\") ~ \"F0\",\n                                       str_detect(fish, \"^K\") ~ \"F1\"))\n\n# Bind two data frames\ndf_all = dplyr::bind_rows(df_f01, df)"},{"path":"phenotypes.html","id":"period","chapter":"6 Phenotypes","heading":"6.2 Period","text":"Note F0s F1s imaged AU scope.DB tends higher temperature AU, 0.7°C.AU extensively calibrated, may cause differences phenotype measurements.","code":""},{"path":"phenotypes.html","id":"mean","chapter":"6 Phenotypes","heading":"6.2.1 Mean","text":"Difference means two microscopes:","code":"\nmicr_mean = df %>% \n  dplyr::filter(!is.na(Microscope)) %>% \n  dplyr::group_by(Microscope) %>% \n  dplyr::summarise(mean_pheno = mean(mean))\n\nmicr_mean\n#> # A tibble: 2 × 2\n#>   Microscope mean_pheno\n#>   <chr>           <dbl>\n#> 1 AU               60.6\n#> 2 DB               64.1\n\n# Difference\ndiff_mean = abs(micr_mean$mean_pheno[1] - micr_mean$mean_pheno[2])"},{"path":"phenotypes.html","id":"histogram","chapter":"6 Phenotypes","heading":"6.2.1.1 Histogram","text":"","code":"\nmean_pal = c(\"#177e89\", \"#084c61\")\n\ndf %>% \n  # remove NAs in `Microscope` column\n  dplyr::filter(!is.na(Microscope)) %>% \n  dplyr::group_by(Microscope) %>% \n  ggplot() +\n    geom_histogram(aes(x = mean, fill = Microscope),\n                   bins = 50) +\n    scale_fill_manual(values = mean_pal) +\n    geom_vline(data=micr_mean, aes(xintercept=mean_pheno), colour = darker(mean_pal, amount = 50)) +\n    #stat_summary(fun=mean, geom=\"line\") +\n    facet_grid(rows = vars(Microscope)) +\n    theme_bw() +\n    xlab(\"period mean\") +\n    ggtitle(paste(\"Period mean\\n\", \"Difference between means: \", diff_mean, sep = \"\"))\n\n# Make output directory and save\nOUT_DIR = here::here(PLOT_DIR, \"mean\")\ndir.create(OUT_DIR, recursive = T, showWarnings = F)\n\nggsave(file.path(OUT_DIR, paste(\"histogram\", \".png\", sep = \"\")),\n device = \"png\",\n width = 9.6,\n height = 6,\n units = \"in\",\n dpi = 400)\n  "},{"path":"phenotypes.html","id":"q-q-plot","chapter":"6 Phenotypes","heading":"6.2.1.2 Q-Q plot","text":"","code":"\ndf %>% \n  # remove NAs in `Microscope` column\n  dplyr::filter(!is.na(Microscope)) %>% \n  ggplot() +\n    stat_qq(aes(sample = mean, colour = Microscope)) +\n    stat_qq_line(aes(sample = mean, colour = Microscope)) +\n    scale_colour_manual(values = c(\"#177e89\", \"#084c61\")) +\n    facet_grid(rows = vars(Microscope)) +\n    theme_bw() +\n    xlab(\"period mean\") +\n    ggtitle(\"Period mean\") +\n    theme(aspect.ratio=1)\n\n# Make output directory and save\nOUT_DIR = here::here(PLOT_DIR, \"mean\")\ndir.create(OUT_DIR, recursive = T, showWarnings = F)\n\nggsave(file.path(OUT_DIR, paste(\"qqplot\", \".png\", sep = \"\")),\n device = \"png\",\n width = 9.6,\n height = 6,\n units = \"in\",\n dpi = 400)\n  "},{"path":"phenotypes.html","id":"boxplot","chapter":"6 Phenotypes","heading":"6.2.1.3 Boxplot","text":"Kruskal-Wallis test","code":"\nmean_kw = kruskal.test(list(df_all %>% \n                             dplyr::filter(Microscope == \"AU\") %>% \n                             dplyr::pull(mean),\n                           df_all %>% \n                             dplyr::filter(Microscope == \"DB\") %>% \n                             dplyr::pull(mean)))\n\nmean_kw$p.value\n#> [1] 6.498432e-38\ndf_all %>% \n  # remove NAs\n  dplyr::filter(!is.na(Microscope)) %>% \n  ggplot(aes(GEN, mean, fill = Microscope)) +\n    geom_violin() + \n    geom_boxplot(width = 0.3) +\n    ggbeeswarm::geom_beeswarm(aes(GEN, mean, colour = Microscope), size = 0.4, alpha = 0.5) +\n    facet_grid(cols = vars(Microscope)) + \n    scale_colour_manual(values = lighter(c(\"#177e89\", \"#084c61\"), amount = 50)) +\n    scale_fill_manual(values = darker(c(\"#177e89\", \"#084c61\"), amount = 50)) +\n    theme_bw() +\n    xlab(\"generation\") +\n    ggtitle(paste(\"Kruskal-Wallis p-value comparing AB and DB (F2 only):\", mean_kw$p.value))"},{"path":"phenotypes.html","id":"intercept","chapter":"6 Phenotypes","heading":"6.3 Intercept","text":"Difference means two microscopes:","code":"\nmicr_intercept = df %>% \n  dplyr::filter(!is.na(Microscope)) %>% \n  dplyr::group_by(Microscope) %>% \n  dplyr::summarise(mean_pheno = mean(intercept))\n\nmicr_intercept\n#> # A tibble: 2 × 2\n#>   Microscope mean_pheno\n#>   <chr>           <dbl>\n#> 1 AU               57.9\n#> 2 DB               61.9\n\n# Difference\ndiff_intercept = abs(micr_intercept$mean_pheno[1] - micr_intercept$mean_pheno[2])"},{"path":"phenotypes.html","id":"histogram-1","chapter":"6 Phenotypes","heading":"6.3.0.1 Histogram","text":"","code":"\nintercept_pal = c(\"#8D99AE\", \"#2b2d42\")\n\ndf %>% \n  # remove NAs in `Microscope` column\n  dplyr::filter(!is.na(Microscope)) %>% \n  ggplot() +\n    geom_histogram(aes(intercept, fill = Microscope),\n                   bins = 50) +\n    geom_vline(data=micr_intercept, aes(xintercept=mean_pheno), colour = darker(intercept_pal, amount = 50)) +\n    scale_fill_manual(values = intercept_pal) +\n    facet_grid(rows = vars(Microscope)) +\n    xlab(\"period intercept\") +\n    theme_bw() +\n    ggtitle(paste(\"Period intercept\\n\", \"Difference between means: \", diff_intercept, sep = \"\"))\n\n# Make output directory and save\nOUT_DIR = here::here(PLOT_DIR, \"intercept\")\ndir.create(OUT_DIR, recursive = T, showWarnings = F)\n\nggsave(file.path(OUT_DIR, paste(\"histogram\", \".png\", sep = \"\")),\n device = \"png\",\n width = 9.6,\n height = 6,\n units = \"in\",\n dpi = 400)\n  "},{"path":"phenotypes.html","id":"q-q-plot-1","chapter":"6 Phenotypes","heading":"6.3.0.2 Q-Q plot","text":"","code":"\ndf %>% \n  # remove NAs in `Microscope` column\n  dplyr::filter(!is.na(Microscope)) %>% \n  ggplot() +\n    stat_qq(aes(sample = intercept, colour = Microscope)) +\n    stat_qq_line(aes(sample = intercept, colour = Microscope)) +\n    scale_colour_manual(values = c(\"#8D99AE\", \"#2b2d42\")) +\n    facet_grid(rows = vars(Microscope)) +\n    theme_bw() +\n    xlab(\"period intercept\") +\n    ggtitle(\"Period intercept\") +\n    theme(aspect.ratio=1)\n\n# Make output directory and save\nOUT_DIR = here::here(PLOT_DIR, \"intercept\")\ndir.create(OUT_DIR, recursive = T, showWarnings = F)\n\nggsave(file.path(OUT_DIR, paste(\"qqplot\", \".png\", sep = \"\")),\n device = \"png\",\n width = 9.6,\n height = 6,\n units = \"in\",\n dpi = 400)"},{"path":"phenotypes.html","id":"boxplot-1","chapter":"6 Phenotypes","heading":"6.3.0.3 Boxplot","text":"Kruskal-Wallis test","code":"\nintercept_kw = kruskal.test(list(df_all %>% \n                             dplyr::filter(Microscope == \"AU\") %>% \n                             dplyr::pull(intercept),\n                           df_all %>% \n                             dplyr::filter(Microscope == \"DB\") %>% \n                             dplyr::pull(intercept)))\n\nintercept_kw$p.value\n#> [1] 5.067328e-44\ndf_all %>% \n  # remove NAs\n  dplyr::filter(!is.na(Microscope)) %>% \n  ggplot(aes(GEN, mean, fill = Microscope)) +\n    geom_violin() + \n    geom_boxplot(width = 0.3) +\n    ggbeeswarm::geom_beeswarm(aes(GEN, mean, colour = Microscope), size = 0.4, alpha = 0.5) +\n    facet_grid(cols = vars(Microscope)) + \n    scale_colour_manual(values = lighter(c(\"#8D99AE\", \"#2b2d42\"), amount = 50)) +\n    scale_fill_manual(values = darker(c(\"#8D99AE\", \"#2b2d42\"), amount = 50)) +\n    theme_bw() +\n    xlab(\"generation\") +\n    ggtitle(paste(\"Kruskal-Wallis p-value comparing AB and DB (F2 only):\", intercept_kw$p.value))"},{"path":"phenotypes.html","id":"presomitic-mesoderm-size","chapter":"6 Phenotypes","heading":"6.4 Presomitic mesoderm size","text":"","code":""},{"path":"phenotypes.html","id":"histogram-2","chapter":"6 Phenotypes","heading":"6.4.1 Histogram","text":"","code":"\ndf %>% \n  ggplot() +\n    geom_histogram(aes(unsegmented_psm_area),\n                   fill = \"#401f3e\",\n                   bins = 50) +\n    theme_bw() +\n    ggtitle(\"Presomitic mesoderm size\")\n#> Warning: Removed 14 rows containing non-finite values\n#> (stat_bin).\n\n# Make output directory and save\nOUT_DIR = here::here(PLOT_DIR, \"unsegmented_psm_area\")\ndir.create(OUT_DIR, recursive = T, showWarnings = F)\n\nggsave(file.path(OUT_DIR, paste(\"histogram\", \".png\", sep = \"\")),\n device = \"png\",\n width = 9.6,\n height = 6,\n units = \"in\",\n dpi = 400)\n#> Warning: Removed 14 rows containing non-finite values\n#> (stat_bin)."},{"path":"phenotypes.html","id":"q-q-plot-2","chapter":"6 Phenotypes","heading":"6.4.2 Q-Q plot","text":"","code":"\ndf %>% \n  ggplot(aes(sample = intercept)) +\n    stat_qq(colour = \"#401f3e\") +\n    stat_qq_line(colour = darker(\"#401f3e\")) +\n    theme_bw() +\n    xlab(\"presomitic mesoderm area\") +\n    ggtitle(\"Presomitic mesoderm area\") +\n    theme(aspect.ratio=1)\n#> Warning: Removed 8 rows containing non-finite values\n#> (stat_qq).\n#> Warning: Removed 8 rows containing non-finite values\n#> (stat_qq_line).\n\n# Make output directory and save\nOUT_DIR = here::here(PLOT_DIR, \"unsegmented_psm_area\")\ndir.create(OUT_DIR, recursive = T, showWarnings = F)\n\nggsave(file.path(OUT_DIR, paste(\"qqplot\", \".png\", sep = \"\")),\n device = \"png\",\n width = 9.6,\n height = 6,\n units = \"in\",\n dpi = 400)\n#> Warning: Removed 8 rows containing non-finite values (stat_qq).\n\n#> Warning: Removed 8 rows containing non-finite values\n#> (stat_qq_line)."},{"path":"association-testing-with-simulated-phenotypes.html","id":"association-testing-with-simulated-phenotypes","chapter":"7 Association testing with simulated phenotypes","heading":"7 Association testing with simulated phenotypes","text":"code simulating phenotypes using test GWLS code set Snakefile, specifically rules simulate_phenotypes test_gwls: https://github.com/brettellebi/somites/blob/master/workflow/rules/07_association_testing.smk","code":"\ndate_of_assoc_test = \"20220214\"\nRECOM_BLOCKS_DIR = \"/nfs/research/birney/users/ian/somites/recombination_blocks/F2/all_sites\"\nSAMPLE_GTS_DIR = \"/hps/nobackup/birney/users/ian/somites/association_testing/20220214/all_sites/sample_genos\"\nRESULTS_DIR = \"/hps/nobackup/birney/users/ian/somites/association_testing/20220214\"\nlibrary(here)\nsource(here::here(\"book/source/04-Association_testing.R\"))"},{"path":"association-testing-with-simulated-phenotypes.html","id":"read-in-sampled-genotypes","chapter":"7 Association testing with simulated phenotypes","heading":"7.1 Read in sampled genotypes","text":"","code":"\n# List files\nTARGET_FILES = list.files(SAMPLE_GTS_DIR, full.names = T) ; names(TARGET_FILES) = TARGET_FILES\n\nsample_genos_list = purrr::map(TARGET_FILES, function(FILE){\n  readr::read_csv(FILE) %>% \n    dplyr::select(LOCUS)\n})\nnames(sample_genos_list) = TARGET_FILES %>% \n  basename() %>% \n  stringr::str_remove(\".csv\")"},{"path":"association-testing-with-simulated-phenotypes.html","id":"read-in-gwls-results","chapter":"7 Association testing with simulated phenotypes","heading":"7.2 Read in GWLS results","text":"","code":"\n# List files\nTARGET_DIRS = list.files(RESULTS_DIR, pattern = \"test_results\", full.names = T, recursive = T, include.dirs = T)\nTARGET_FILES = list.files(TARGET_DIRS, full.names = T, recursive = T); names(TARGET_FILES) = TARGET_FILES\n\n# Create DF to separate file name into variables\nmeta_df = tibble::tibble(FILENAME = TARGET_FILES) %>% \n  tidyr::separate(col = FILENAME,\n                  sep = \"/\",\n                  into = c(rep(NA, 9), \"SITE_FILTER\", NA, \"BIN_LENGTH\")) %>% \n  # remove extension from BIN_LENGTH\n  dplyr::mutate(BIN_LENGTH = stringr::str_remove(BIN_LENGTH, \".rds\"))\n\n# Read into list\nresults_list = purrr::map(seq_along(TARGET_FILES), function(INDEX){\n  OUT = list()\n  \n  # Add metadata info\n  OUT[[\"SITE_FILTER\"]] = meta_df %>% \n    dplyr::slice(INDEX) %>% \n    dplyr::pull(\"SITE_FILTER\")\n  OUT[[\"BIN_LENGTH\"]] = meta_df %>% \n    dplyr::slice(INDEX) %>% \n    dplyr::pull(\"BIN_LENGTH\")\n  \n  # Read in results\n  results = readRDS(TARGET_FILES[INDEX])\n  ## Add to list\n  OUT[[\"RESULTS\"]] = results$results\n  \n  return(OUT)\n})\n\nnames(results_list) = TARGET_FILES %>% \n  basename() %>% \n  stringr::str_remove(\".rds\")"},{"path":"association-testing-with-simulated-phenotypes.html","id":"plot","chapter":"7 Association testing with simulated phenotypes","heading":"7.3 Plot","text":"","code":"\nCOUNTER = 0\nman_int = lapply(results_list[1], function(RES){\n  COUNTER <<- COUNTER + 1\n  # Get bin length\n  BIN_LENGTH = RES[[\"BIN_LENGTH\"]] %>% \n    as.numeric()\n  \n  # Clean data frame\n  test_results = RES[[\"RESULTS\"]] %>% \n    dplyr::left_join(med_chr_lens, by = c(\"Chr\" = \"chr\")) %>% \n    # add x-coord\n    dplyr::mutate(X_COORD = pos + TOT) %>% \n    # change column names\n    dplyr::rename(CHROM = Chr, BIN_START = pos) %>% \n    # add BIN_END\n    dplyr::mutate(BIN_END = BIN_START + BIN_LENGTH - 1) %>% \n    # add locus\n    dplyr::mutate(LOCUS = paste(CHROM, BIN_START, sep = \":\")) %>%\n    # target or not\n    dplyr::mutate(TARGET = dplyr::if_else(LOCUS %in% sample_genos_list[[RES[[\"BIN_LENGTH\"]]]]$LOCUS,\n                                          \"yes\",\n                                          \"no\"),\n                  TARGET = factor(TARGET, levels = c(\"yes\", \"no\"))) %>% \n    # create vector of colours\n    dplyr::mutate(COLOUR = dplyr::case_when(TARGET == \"yes\" ~ names(gwas_pal)[1],\n                                            gtools::even(CHROM) ~ names(gwas_pal)[2],\n                                            gtools::odd(CHROM) ~ names(gwas_pal)[3]),\n                  # order so that `target` is plotted last, at the front\n                  COLOUR = factor(COLOUR, levels = rev(names(gwas_pal))),\n                  SHAPE = dplyr::if_else(TARGET == \"yes\",\n                                         18,\n                                         20),\n                  SIZE = dplyr::if_else(TARGET == \"yes\",\n                                         1,\n                                         0.5),\n                  ALPHA = dplyr::if_else(TARGET == \"yes\",\n                                         1,\n                                         0.5)\n                  )\n  \n  # Plot\n  p1 = test_results %>% \n    ggplot(aes(x = X_COORD,\n               y = -log10(p_value_REML),\n               colour = COLOUR,\n               shape = SHAPE,\n               size = SIZE,\n               alpha = ALPHA,\n               label = CHROM,\n               label2 = BIN_START,\n               label3 = BIN_END)) + \n    geom_point() +\n    aes(group = rev(TARGET)) +\n    scale_color_manual(values = gwas_pal) +\n    scale_shape_identity() +\n    scale_size_identity() +\n    scale_alpha_identity() +\n    scale_x_continuous(breaks = med_chr_lens$MID_TOT, \n                       labels = med_chr_lens$chr) +\n    theme_bw() +\n    theme(panel.grid.major.x = element_blank(),\n          panel.grid.minor.x = element_blank()\n    ) +\n    guides(colour = \"none\") + \n    ggtitle(paste(\"Bin length:\", BIN_LENGTH)) +\n    xlab(\"Chromosome\") +\n    ylab(\"-log10(p-value)\")\n  \n  out = ggplotly(p1, tooltip = c(\"CHROM\", \"BIN_START\", \"BIN_END\"))\n  \n  return(out)\n})\n\nman_int[[1]]"},{"path":"gwas-results.html","id":"gwas-results","chapter":"8 GWAS results","heading":"8 GWAS results","text":"","code":"\nlibrary(here)\nsource(here::here(\"book/source/04-Association_testing.R\"))"},{"path":"gwas-results.html","id":"notes","chapter":"8 GWAS results","heading":"8.1 Notes","text":"20211104 association test performed full sites file. Results : /nfs/research/birney/users/ian/somites/association_testing/20211104_true/results20211109 association test performed sites excluding overlapping repeat regions. Results : /nfs/research/birney/users/ian/somites/association_testing/20211109_true/results20220214 association tests performed filter types including PSM size third phenotype.","code":""},{"path":"gwas-results.html","id":"snakemake-rules","chapter":"8 GWAS results","heading":"8.2 Snakemake rules","text":"Snakemake rules running GWAS phenotypes: https://github.com/brettellebi/somites/blob/master/workflow/rules/07_assocation_testing.smk","code":""},{"path":"gwas-results.html","id":"results","chapter":"8 GWAS results","heading":"8.3 Results","text":"","code":"\nDATE_OF_ASSOC_TEST = 20220214"},{"path":"gwas-results.html","id":"all-sites","chapter":"8 GWAS results","heading":"8.3.1 All sites","text":"","code":"\nSITE_FILTER = \"all_sites\"\nINVERSE_NORM = \"TRUE\""},{"path":"gwas-results.html","id":"intercept-1","chapter":"8 GWAS results","heading":"8.3.1.1 Intercept","text":"","code":"\nTARGET_PHENO = \"intercept\"\nCOVARIATES = \"None\"\nknitr::include_graphics(here::here(\"book/plots/manhattans\", DATE_OF_ASSOC_TEST, SITE_FILTER, TARGET_PHENO, COVARIATES, INVERSE_NORM, \"5000.png\"))\nknitr::include_graphics(here::here(\"book/plots/manhattans\", DATE_OF_ASSOC_TEST, SITE_FILTER, TARGET_PHENO, COVARIATES, INVERSE_NORM, \"20000.png\"))\nCOVARIATES = \"Microscope\"\nknitr::include_graphics(here::here(\"book/plots/manhattans\", DATE_OF_ASSOC_TEST, SITE_FILTER, TARGET_PHENO, COVARIATES, INVERSE_NORM, \"5000.png\"))\nknitr::include_graphics(here::here(\"book/plots/manhattans\", DATE_OF_ASSOC_TEST, SITE_FILTER, TARGET_PHENO, COVARIATES, INVERSE_NORM, \"20000.png\"))"},{"path":"gwas-results.html","id":"mean-1","chapter":"8 GWAS results","heading":"8.3.1.2 Mean","text":"","code":"\nTARGET_PHENO = \"mean\"\nCOVARIATES = \"None\"\nknitr::include_graphics(here::here(\"book/plots/manhattans\", DATE_OF_ASSOC_TEST, SITE_FILTER, TARGET_PHENO, COVARIATES, INVERSE_NORM, \"5000.png\"))\nknitr::include_graphics(here::here(\"book/plots/manhattans\", DATE_OF_ASSOC_TEST, SITE_FILTER, TARGET_PHENO, COVARIATES, INVERSE_NORM, \"20000.png\"))\nCOVARIATES = \"Microscope\"\nknitr::include_graphics(here::here(\"book/plots/manhattans\", DATE_OF_ASSOC_TEST, SITE_FILTER, TARGET_PHENO, COVARIATES, INVERSE_NORM, \"5000.png\"))\nknitr::include_graphics(here::here(\"book/plots/manhattans\", DATE_OF_ASSOC_TEST, SITE_FILTER, TARGET_PHENO, COVARIATES, INVERSE_NORM, \"20000.png\"))"},{"path":"gwas-results.html","id":"psm","chapter":"8 GWAS results","heading":"8.3.1.3 PSM","text":"","code":"\nTARGET_PHENO = \"unsegmented_psm_area\"\nCOVARIATES = \"None\"\nknitr::include_graphics(here::here(\"book/plots/manhattans\", DATE_OF_ASSOC_TEST, SITE_FILTER, TARGET_PHENO, COVARIATES, INVERSE_NORM, \"5000.png\"))\nknitr::include_graphics(here::here(\"book/plots/manhattans\", DATE_OF_ASSOC_TEST, SITE_FILTER, TARGET_PHENO, COVARIATES, INVERSE_NORM, \"20000.png\"))\nCOVARIATES = \"Microscope\"\nknitr::include_graphics(here::here(\"book/plots/manhattans\", DATE_OF_ASSOC_TEST, SITE_FILTER, TARGET_PHENO, COVARIATES, INVERSE_NORM, \"5000.png\"))\nknitr::include_graphics(here::here(\"book/plots/manhattans\", DATE_OF_ASSOC_TEST, SITE_FILTER, TARGET_PHENO, COVARIATES, INVERSE_NORM, \"20000.png\"))"},{"path":"gwas-results.html","id":"all-filters","chapter":"8 GWAS results","heading":"8.3.2 All filters","text":"","code":"\nSITE_FILTER = \"no_repeat_reads_or_pers_hets_filtered_for_read_count_and_cab_prop\"\nINVERSE_NORM = \"TRUE\""},{"path":"gwas-results.html","id":"intercept-2","chapter":"8 GWAS results","heading":"8.3.2.1 Intercept","text":"","code":"\nTARGET_PHENO = \"intercept\"\nCOVARIATES = \"None\"\nknitr::include_graphics(here::here(\"book/plots/manhattans\", DATE_OF_ASSOC_TEST, SITE_FILTER, TARGET_PHENO, COVARIATES, INVERSE_NORM, \"5000.png\"))\nknitr::include_graphics(here::here(\"book/plots/manhattans\", DATE_OF_ASSOC_TEST, SITE_FILTER, TARGET_PHENO, COVARIATES, INVERSE_NORM, \"20000.png\"))\nCOVARIATES = \"Microscope\"\nknitr::include_graphics(here::here(\"book/plots/manhattans\", DATE_OF_ASSOC_TEST, SITE_FILTER, TARGET_PHENO, COVARIATES, INVERSE_NORM, \"5000.png\"))\nknitr::include_graphics(here::here(\"book/plots/manhattans\", DATE_OF_ASSOC_TEST, SITE_FILTER, TARGET_PHENO, COVARIATES, INVERSE_NORM, \"20000.png\"))"},{"path":"gwas-results.html","id":"mean-2","chapter":"8 GWAS results","heading":"8.3.2.2 Mean","text":"","code":"\nTARGET_PHENO = \"mean\"\nCOVARIATES = \"None\"\nknitr::include_graphics(here::here(\"book/plots/manhattans\", DATE_OF_ASSOC_TEST, SITE_FILTER, TARGET_PHENO, COVARIATES, INVERSE_NORM, \"5000.png\"))\nknitr::include_graphics(here::here(\"book/plots/manhattans\", DATE_OF_ASSOC_TEST, SITE_FILTER, TARGET_PHENO, COVARIATES, INVERSE_NORM, \"20000.png\"))\nCOVARIATES = \"Microscope\"\nknitr::include_graphics(here::here(\"book/plots/manhattans\", DATE_OF_ASSOC_TEST, SITE_FILTER, TARGET_PHENO, COVARIATES, INVERSE_NORM, \"5000.png\"))\nknitr::include_graphics(here::here(\"book/plots/manhattans\", DATE_OF_ASSOC_TEST, SITE_FILTER, TARGET_PHENO, COVARIATES, INVERSE_NORM, \"20000.png\"))"},{"path":"gwas-results.html","id":"psm-1","chapter":"8 GWAS results","heading":"8.3.2.3 PSM","text":"","code":"\nTARGET_PHENO = \"unsegmented_psm_area\"\nCOVARIATES = \"None\"\nknitr::include_graphics(here::here(\"book/plots/manhattans\", DATE_OF_ASSOC_TEST, SITE_FILTER, TARGET_PHENO, COVARIATES, INVERSE_NORM, \"5000.png\"))\nknitr::include_graphics(here::here(\"book/plots/manhattans\", DATE_OF_ASSOC_TEST, SITE_FILTER, TARGET_PHENO, COVARIATES, INVERSE_NORM, \"20000.png\"))\nCOVARIATES = \"Microscope\"\nknitr::include_graphics(here::here(\"book/plots/manhattans\", DATE_OF_ASSOC_TEST, SITE_FILTER, TARGET_PHENO, COVARIATES, INVERSE_NORM, \"5000.png\"))\nknitr::include_graphics(here::here(\"book/plots/manhattans\", DATE_OF_ASSOC_TEST, SITE_FILTER, TARGET_PHENO, COVARIATES, INVERSE_NORM, \"20000.png\"))"},{"path":"association-testing-with-only-au-microscope.html","id":"association-testing-with-only-au-microscope","chapter":"9 Association testing with only AU microscope","heading":"9 Association testing with only AU microscope","text":"","code":""},{"path":"association-testing-with-only-au-microscope.html","id":"load-libraries-and-variables","chapter":"9 Association testing with only AU microscope","heading":"9.1 Load libraries and variables","text":"","code":"\nlibrary(tidyverse)\nlibrary(GridLMM)\nlibrary(KRLS)\n\nGENO_FILE = \"/nfs/research/birney/users/ian/somites/association_testing/20220214/all_sites/inputs/5000.rds\"\nPHENO_FILE = here::here(\"data/20220214_phenotypes.xlsx\") # True phenotypes\nGWLS_SOURCE_FILE = here::here(\"workflow/scripts/run_gwls_source.R\")\nMANHAT_SOURCE_FILE = here::here(\"workflow/scripts/get_manhattan_source.R\")\nBIN_LENGTH = 5000\nTARGET_PHENO = \"intercept\"\nMICROSCOPE = \"AU\"\nPLOT_DIR = here::here(\"book/plots/20220214/microscope_test\")\nALPHA = 0.05\n\n# Get GWAS functions\n\nsource(GWLS_SOURCE_FILE)\nsource(MANHAT_SOURCE_FILE)"},{"path":"association-testing-with-only-au-microscope.html","id":"load-genotypes-and-positions","chapter":"9 Association testing with only AU microscope","heading":"9.2 Load genotypes and positions","text":"","code":"\nin_list = readRDS(GENO_FILE)"},{"path":"association-testing-with-only-au-microscope.html","id":"read-in-phenotypes","chapter":"9 Association testing with only AU microscope","heading":"9.3 Read in phenotypes","text":"","code":"\n\n\n## Read in file and wrangle\nphenos = readxl::read_xlsx(PHENO_FILE) %>%\n    # adjust sample names\n    dplyr::mutate(SAMPLE = fish %>% stringr::str_remove(\"KC\")) %>%\n    # select key columns\n    dplyr::select(SAMPLE, all_of(TARGET_PHENO), Microscope) %>%\n    # ensure that the phenotype column is numeric\n    dplyr::mutate(dplyr::across(all_of(TARGET_PHENO),\n                                ~ as.numeric(.x))) %>% \n    # THIS IS THE (big) CHANGE: filter for microscope\n    dplyr::filter(Microscope == MICROSCOPE)"},{"path":"association-testing-with-only-au-microscope.html","id":"filter-for-samples-with-both-genos-and-phenos","chapter":"9 Association testing with only AU microscope","heading":"9.4 Filter for samples with both genos and phenos","text":"","code":"\n## Filter and order phenotypes\nin_list[[\"phenotypes\"]] = phenos %>%\n    # filter phenotypes for those with genotypes\n    dplyr::filter(SAMPLE %in% in_list[[\"sample_order\"]]) %>%\n    # join to `sample_order` to ensure phenotypes are in the correct order   \n    dplyr::left_join(tibble::tibble(SAMPLE = in_list[[\"sample_order\"]]),\n                     .,\n                     by = \"SAMPLE\") %>%\n    # remove NAs (created by the samples that have genotypes but not phenotypes)\n    tidyr::drop_na() %>%\n    # the GridLMM code doesn't work with tibbles\n    as.data.frame()\n\n## Filter genotypes for those that have phenotypes\nin_list[[\"genotypes\"]] = in_list[[\"genotypes\"]] %>%\n    dplyr::slice(in_list[[\"sample_order\"]] %in% in_list[[\"phenotypes\"]]$SAMPLE %>% \n                   which())\n\n## Filter sample_order for those that have phenotypes\nin_list[[\"sample_order\"]] = in_list[[\"phenotypes\"]]$SAMPLE\n\n## Get number of samples\nN_SAMPLES = in_list[[\"sample_order\"]] %>% \n  length()"},{"path":"association-testing-with-only-au-microscope.html","id":"run-gwas","chapter":"9 Association testing with only AU microscope","heading":"9.5 Run GWAS","text":"","code":"\n# Run GWAS\n\nout = run_gwas(d = in_list[[\"genotypes\"]],\n               m = in_list[[\"positions\"]],\n               p = in_list[[\"phenotypes\"]],\n               invers_norm = T\n              )\n\nsaveRDS(out, paste(\"/hps/nobackup/birney/users/ian/somites/microscope_test/gwas_results/\", MICROSCOPE, \".rds\", sep = \"\"))\nout = readRDS(paste(\"/hps/nobackup/birney/users/ian/somites/microscope_test/gwas_results/\", MICROSCOPE, \".rds\", sep = \"\"))"},{"path":"association-testing-with-only-au-microscope.html","id":"run-permutations","chapter":"9 Association testing with only AU microscope","heading":"9.6 Run permutations","text":"","code":""},{"path":"association-testing-with-only-au-microscope.html","id":"permute-phenos","chapter":"9 Association testing with only AU microscope","heading":"9.6.1 Permute phenos","text":"","code":"\nseeds = 1:10\n\ncounter = 0\nperm_phenos = purrr::map(seeds, function(SEED){\n  counter <<- counter + 1\n  # set seed\n  set.seed(seeds[counter])\n  # get original phenotypes\n  orig_phenos = phenos\n  # randomise\n  phenos = orig_phenos\n      # randomise phenotype\n      dplyr::mutate(dplyr::across(all_of(TARGET_PHENO),\n                                  ~ sample(.x)))\n})"},{"path":"association-testing-with-only-au-microscope.html","id":"run-gwls","chapter":"9 Association testing with only AU microscope","heading":"9.6.2 Run GWLS","text":"","code":"\nperm_out = purrr::map(perm_phenos, function(PERM_PHENO){\n  ## Get phenotypes\n  phenos = PERM_PHENO\n  \n  ## Filter and order phenotypes\n  in_list[[\"phenotypes\"]] = phenos %>%\n      # filter phenotypes for those with genotypes\n      dplyr::filter(SAMPLE %in% in_list[[\"sample_order\"]]) %>%\n      # join to `sample_order` to ensure phenotypes are in the correct order   \n      dplyr::left_join(tibble::tibble(SAMPLE = in_list[[\"sample_order\"]]),\n                       .,\n                       by = \"SAMPLE\") %>%\n      # remove NAs (created by the samples that have genotypes but not phenotypes)\n      tidyr::drop_na() %>%\n      # the GridLMM code doesn't work with tibbles\n      as.data.frame()\n  \n  ## Filter genotypes for those that have phenotypes\n  in_list[[\"genotypes\"]] = in_list[[\"genotypes\"]] %>%\n      dplyr::filter(in_list[[\"sample_order\"]] %in% in_list[[\"phenotypes\"]]$SAMPLE)\n  \n  ## Filter sample_order for those that have phenotypes\n  in_list[[\"sample_order\"]] = in_list[[\"phenotypes\"]]$SAMPLE\n              \n  # Run GWAS\n  \n  out = run_gwas(d = in_list[[\"genotypes\"]],\n                 m = in_list[[\"positions\"]],\n                 p = in_list[[\"phenotypes\"]],\n                 invers_norm = T\n                )\n  \n  return(out)\n})\n\nnames(perm_out) = seeds\n\nsaveRDS(perm_out, paste(\"/hps/nobackup/birney/users/ian/somites/microscope_test/perms/\", MICROSCOPE, \".rds\", sep = \"\"))\nperm_out = readRDS(paste(\"/hps/nobackup/birney/users/ian/somites/microscope_test/perms/\", MICROSCOPE, \".rds\", sep = \"\"))"},{"path":"association-testing-with-only-au-microscope.html","id":"get-minimum","chapter":"9 Association testing with only AU microscope","heading":"9.6.3 Get minimum","text":"","code":"\nperm_df = purrr::map_dfr(perm_out, function(PERM){\n  OUT = tibble::tibble(MIN_P = PERM$results$p_value_REML %>%\n                         min(., na.rm = T)\n  )\n}, .id = \"SEED\")\n\n# Get minimum\nSIG_LEVEL = min(perm_df$MIN_P)\n\n# Get bonferroni correction\nSIG_BONF = ALPHA / ncol(in_list[[\"genotypes\"]])"},{"path":"association-testing-with-only-au-microscope.html","id":"generate-manhattan-plot","chapter":"9 Association testing with only AU microscope","heading":"9.7 Generate Manhattan plot","text":"","code":"\nout_clean = clean_gwas_res(out,\n                           bin_length = BIN_LENGTH,\n                           chr_lens = med_chr_lens)\n\n# Plot\nout_plot = plot_man(out_clean,\n                    site_filter = \"all_sites\",\n                    phenotype = TARGET_PHENO,\n                    bin_length = BIN_LENGTH, \n                    gwas_pal = intercept_pal,\n                    med_chr_lens = med_chr_lens,\n                    sig_level = SIG_LEVEL,\n                    bonferroni = SIG_BONF) +\n                 labs(subtitle = paste(\"Microscope: \", MICROSCOPE, \"\\nCovariates: None\\nn samples: \", N_SAMPLES, sep = \"\"))\n\nout_plot\n#> Warning: Removed 7 rows containing missing values\n#> (geom_point).\nggsave(file.path(PLOT_DIR, paste(MICROSCOPE, \"_manhattan.png\", sep = \"\")),\n       out_plot,\n       device = \"png\",\n       width = 9.6,\n       height = 6,\n       units = \"in\",\n       dpi = 400)\n#> Warning: Removed 7 rows containing missing values\n#> (geom_point)."},{"path":"association-testing-with-only-db-microscope.html","id":"association-testing-with-only-db-microscope","chapter":"10 Association testing with only DB microscope","heading":"10 Association testing with only DB microscope","text":"","code":""},{"path":"association-testing-with-only-db-microscope.html","id":"load-libraries-and-variables-1","chapter":"10 Association testing with only DB microscope","heading":"10.1 Load libraries and variables","text":"","code":"\nlibrary(tidyverse)\nlibrary(GridLMM)\nlibrary(KRLS)\n\nGENO_FILE = \"/nfs/research/birney/users/ian/somites/association_testing/20220214/all_sites/inputs/5000.rds\"\nPHENO_FILE = here::here(\"data/20220214_phenotypes.xlsx\") # True phenotypes\nGWLS_SOURCE_FILE = here::here(\"workflow/scripts/run_gwls_source.R\")\nMANHAT_SOURCE_FILE = here::here(\"workflow/scripts/get_manhattan_source.R\")\nBIN_LENGTH = 5000\nTARGET_PHENO = \"intercept\"\nMICROSCOPE = \"DB\"\nPLOT_DIR = here::here(\"book/plots/20220214/microscope_test\")\nALPHA = 0.05\n\n# Get GWAS functions\n\nsource(GWLS_SOURCE_FILE)\nsource(MANHAT_SOURCE_FILE)"},{"path":"association-testing-with-only-db-microscope.html","id":"load-genotypes-and-positions-1","chapter":"10 Association testing with only DB microscope","heading":"10.2 Load genotypes and positions","text":"","code":"\nin_list = readRDS(GENO_FILE)"},{"path":"association-testing-with-only-db-microscope.html","id":"read-in-phenotypes-1","chapter":"10 Association testing with only DB microscope","heading":"10.3 Read in phenotypes","text":"","code":"\n\n\n## Read in file and wrangle\nphenos = readxl::read_xlsx(PHENO_FILE) %>%\n    # adjust sample names\n    dplyr::mutate(SAMPLE = fish %>% stringr::str_remove(\"KC\")) %>%\n    # select key columns\n    dplyr::select(SAMPLE, all_of(TARGET_PHENO), Microscope) %>%\n    # ensure that the phenotype column is numeric\n    dplyr::mutate(dplyr::across(all_of(TARGET_PHENO),\n                                ~ as.numeric(.x))) %>% \n    # THIS IS THE (big) CHANGE: filter for microscope\n    dplyr::filter(Microscope == MICROSCOPE)"},{"path":"association-testing-with-only-db-microscope.html","id":"filter-for-samples-with-both-genos-and-phenos-1","chapter":"10 Association testing with only DB microscope","heading":"10.4 Filter for samples with both genos and phenos","text":"","code":"\n## Filter and order phenotypes\nin_list[[\"phenotypes\"]] = phenos %>%\n    # filter phenotypes for those with genotypes\n    dplyr::filter(SAMPLE %in% in_list[[\"sample_order\"]]) %>%\n    # join to `sample_order` to ensure phenotypes are in the correct order   \n    dplyr::left_join(tibble::tibble(SAMPLE = in_list[[\"sample_order\"]]),\n                     .,\n                     by = \"SAMPLE\") %>%\n    # remove NAs (created by the samples that have genotypes but not phenotypes)\n    tidyr::drop_na() %>%\n    # the GridLMM code doesn't work with tibbles\n    as.data.frame()\n\n## Filter genotypes for those that have phenotypes\nin_list[[\"genotypes\"]] = in_list[[\"genotypes\"]] %>%\n    dplyr::slice(in_list[[\"sample_order\"]] %in% in_list[[\"phenotypes\"]]$SAMPLE %>% \n                   which())\n\n## Filter sample_order for those that have phenotypes\nin_list[[\"sample_order\"]] = in_list[[\"phenotypes\"]]$SAMPLE\n\n## Get number of samples\nN_SAMPLES = in_list[[\"sample_order\"]] %>% \n  length()"},{"path":"association-testing-with-only-db-microscope.html","id":"run-gwas-1","chapter":"10 Association testing with only DB microscope","heading":"10.5 Run GWAS","text":"","code":"\n# Run GWAS\n\nout = run_gwas(d = in_list[[\"genotypes\"]],\n               m = in_list[[\"positions\"]],\n               p = in_list[[\"phenotypes\"]],\n               invers_norm = T\n              )\n\nsaveRDS(out, paste(\"/hps/nobackup/birney/users/ian/somites/microscope_test/gwas_results/\", MICROSCOPE, \".rds\", sep = \"\"))\nout = readRDS(paste(\"/hps/nobackup/birney/users/ian/somites/microscope_test/gwas_results/\", MICROSCOPE, \".rds\", sep = \"\"))"},{"path":"association-testing-with-only-db-microscope.html","id":"run-permutations-1","chapter":"10 Association testing with only DB microscope","heading":"10.6 Run permutations","text":"","code":""},{"path":"association-testing-with-only-db-microscope.html","id":"permute-phenos-1","chapter":"10 Association testing with only DB microscope","heading":"10.6.1 Permute phenos","text":"","code":"\nseeds = 1:10\n\ncounter = 0\nperm_phenos = purrr::map(seeds, function(SEED){\n  counter <<- counter + 1\n  # set seed\n  set.seed(seeds[counter])\n  # get original phenotypes\n  orig_phenos = phenos\n  # randomise\n  phenos = orig_phenos\n      # randomise phenotype\n      dplyr::mutate(dplyr::across(all_of(TARGET_PHENO),\n                                  ~ sample(.x)))\n})"},{"path":"association-testing-with-only-db-microscope.html","id":"run-gwls-1","chapter":"10 Association testing with only DB microscope","heading":"10.6.2 Run GWLS","text":"","code":"\nperm_out = purrr::map(perm_phenos, function(PERM_PHENO){\n  ## Get phenotypes\n  phenos = PERM_PHENO\n  \n  ## Filter and order phenotypes\n  in_list[[\"phenotypes\"]] = phenos %>%\n      # filter phenotypes for those with genotypes\n      dplyr::filter(SAMPLE %in% in_list[[\"sample_order\"]]) %>%\n      # join to `sample_order` to ensure phenotypes are in the correct order   \n      dplyr::left_join(tibble::tibble(SAMPLE = in_list[[\"sample_order\"]]),\n                       .,\n                       by = \"SAMPLE\") %>%\n      # remove NAs (created by the samples that have genotypes but not phenotypes)\n      tidyr::drop_na() %>%\n      # the GridLMM code doesn't work with tibbles\n      as.data.frame()\n  \n  ## Filter genotypes for those that have phenotypes\n  in_list[[\"genotypes\"]] = in_list[[\"genotypes\"]] %>%\n      dplyr::filter(in_list[[\"sample_order\"]] %in% in_list[[\"phenotypes\"]]$SAMPLE)\n  \n  ## Filter sample_order for those that have phenotypes\n  in_list[[\"sample_order\"]] = in_list[[\"phenotypes\"]]$SAMPLE\n              \n  # Run GWAS\n  \n  out = run_gwas(d = in_list[[\"genotypes\"]],\n                 m = in_list[[\"positions\"]],\n                 p = in_list[[\"phenotypes\"]],\n                 invers_norm = T\n                )\n  \n  return(out)\n})\n\nnames(perm_out) = seeds\n\nsaveRDS(perm_out, paste(\"/hps/nobackup/birney/users/ian/somites/microscope_test/perms/\", MICROSCOPE, \".rds\", sep = \"\"))\nperm_out = readRDS(paste(\"/hps/nobackup/birney/users/ian/somites/microscope_test/perms/\", MICROSCOPE, \".rds\", sep = \"\"))"},{"path":"association-testing-with-only-db-microscope.html","id":"get-minimum-1","chapter":"10 Association testing with only DB microscope","heading":"10.6.3 Get minimum","text":"","code":"\nperm_df = purrr::map_dfr(perm_out, function(PERM){\n  OUT = tibble::tibble(MIN_P = PERM$results$p_value_REML %>%\n                         min(., na.rm = T)\n  )\n}, .id = \"SEED\")\n\n# Get minimum\nSIG_LEVEL = min(perm_df$MIN_P)\n\n# Get bonferroni correction\nSIG_BONF = ALPHA / ncol(in_list[[\"genotypes\"]])"},{"path":"association-testing-with-only-db-microscope.html","id":"generate-manhattan-plot-1","chapter":"10 Association testing with only DB microscope","heading":"10.7 Generate Manhattan plot","text":"","code":"\nout_clean = clean_gwas_res(out,\n                           bin_length = BIN_LENGTH,\n                           chr_lens = med_chr_lens)\n\n# Plot\nout_plot = plot_man(out_clean,\n                    site_filter = \"all_sites\",\n                    phenotype = TARGET_PHENO,\n                    bin_length = BIN_LENGTH, \n                    gwas_pal = intercept_pal,\n                    med_chr_lens = med_chr_lens,\n                    sig_level = SIG_LEVEL,\n                    bonferroni = SIG_BONF) +\n                 labs(subtitle = paste(\"Microscope: \", MICROSCOPE, \"\\nCovariates: None\\nn samples: \", N_SAMPLES, sep = \"\"))\n\nout_plot\n#> Warning: Removed 37 rows containing missing values\n#> (geom_point).\nggsave(file.path(PLOT_DIR, paste(MICROSCOPE, \"_manhattan.png\", sep = \"\")),\n       out_plot,\n       device = \"png\",\n       width = 9.6,\n       height = 6,\n       units = \"in\",\n       dpi = 400)\n#> Warning: Removed 37 rows containing missing values\n#> (geom_point)."},{"path":"inverse-normalize-by-microscope.html","id":"inverse-normalize-by-microscope","chapter":"11 Inverse-normalize by microscope","heading":"11 Inverse-normalize by microscope","text":"","code":""},{"path":"inverse-normalize-by-microscope.html","id":"run-gwas-2","chapter":"11 Inverse-normalize by microscope","heading":"11.1 Run GWAS","text":"","code":"\nlibrary(tidyverse)\nlibrary(GridLMM)\nlibrary(KRLS)\n\nGENO_FILE = \"/nfs/research/birney/users/ian/somites/association_testing/20220214/all_sites/inputs/5000.rds\"\nPHENO_FILE = here::here(\"data/20220214_phenotypes.xlsx\") # True phenotypes\nGWLS_SOURCE_FILE = here::here(\"workflow/scripts/run_gwls_source.R\")\nMANHAT_SOURCE_FILE = here::here(\"workflow/scripts/get_manhattan_source.R\")\nBIN_LENGTH = 5000\nTARGET_PHENO = c(\"mean\", \"intercept\")\nMICROSCOPE = \"split_invnorm\"\nOUT_PHENOS = here::here(\"data/20220310_invnorm_phenos.csv\")\nPLOT_DIR = here::here(\"book/plots/20220214/microscope_test\")\nALPHA = 0.05\n\n# Get GWAS functions\n\nsource(GWLS_SOURCE_FILE)\nsource(MANHAT_SOURCE_FILE)\n# Load genotypes and positions\nin_list = readRDS(GENO_FILE)\n# Read in phenotypes\n\n## Read in file and wrangle\nphenos = readxl::read_xlsx(PHENO_FILE) %>%\n    # adjust sample names\n    dplyr::mutate(SAMPLE = fish %>% stringr::str_remove(\"KC\") %>% \n                    as.numeric()) %>%\n    # select key columns\n    dplyr::select(SAMPLE, all_of(TARGET_PHENO), Microscope) %>%\n    # ensure that the phenotype column is numeric\n    dplyr::mutate(dplyr::across(all_of(TARGET_PHENO),\n                                ~ as.numeric(.x)))\n\n## Split into two DFs by microscope and inverse-normalise\nphenos_au = phenos %>% \n  dplyr::filter(Microscope == \"AU\") %>% \n  dplyr::mutate(dplyr::across(dplyr::all_of(TARGET_PHENO),\n                              ~my.invnorm(.)))\n\nphenos_db = phenos %>% \n  dplyr::filter(Microscope == \"DB\") %>% \n  dplyr::mutate(dplyr::across(dplyr::all_of(TARGET_PHENO),\n                              ~my.invnorm(.)))\n\n## Combine\nphenos = dplyr::bind_rows(phenos_au,\n                          phenos_db) %>% \n  dplyr::arrange(SAMPLE) %>% \n  dplyr::mutate(SAMPLE = SAMPLE %>% \n                  as.character())\n\n## Write to file\nreadr::write_csv(phenos, OUT_PHENOS)\n\n# Plot\nmicr_pal = c(\"#8D99AE\", \"#2b2d42\")\n\npheno_hist = phenos %>% \n  # remove NAs in `Microscope` column\n  dplyr::filter(!is.na(Microscope)) %>% \n  ggplot() +\n    geom_histogram(aes(intercept, fill = Microscope),\n                   bins = 50) +\n    scale_fill_manual(values = micr_pal) +\n    facet_grid(rows = vars(Microscope)) +\n    xlab(\"period intercept\") +\n    theme_bw() +\n    ggtitle(\"Inverse-normalised period intercept split by microscope\") +\n    guides(fill = \"none\")\n\npheno_hist\n\nggsave(file.path(PLOT_DIR, paste(MICROSCOPE, \"_intercept_hist.png\", sep = \"\")),\n       pheno_hist,\n       device = \"png\",\n       width = 9.6,\n       height = 6,\n       units = \"in\",\n       dpi = 400)"},{"path":"inverse-normalize-by-microscope.html","id":"prepare-input","chapter":"11 Inverse-normalize by microscope","heading":"11.1.1 Prepare input","text":"","code":"\n\n## Filter and order phenotypes\nin_list[[\"phenotypes\"]] = phenos %>%\n    # filter phenotypes for those with genotypes\n    dplyr::filter(SAMPLE %in% in_list[[\"sample_order\"]]) %>%\n    # join to `sample_order` to ensure phenotypes are in the correct order   \n    dplyr::left_join(tibble::tibble(SAMPLE = in_list[[\"sample_order\"]]),\n                     .,\n                     by = \"SAMPLE\") %>%\n    # remove NAs (created by the samples that have genotypes but not phenotypes)\n    tidyr::drop_na() %>%\n    # the GridLMM code doesn't work with tibbles\n    as.data.frame()\n\n## Filter genotypes for those that have phenotypes\nin_list[[\"genotypes\"]] = in_list[[\"genotypes\"]] %>%\n    dplyr::slice(in_list[[\"sample_order\"]] %in% in_list[[\"phenotypes\"]]$SAMPLE %>% \n                   which())\n\n## Filter sample_order for those that have phenotypes\nin_list[[\"sample_order\"]] = in_list[[\"phenotypes\"]]$SAMPLE\n\n## Get number of samples\nN_SAMPLES = in_list[[\"sample_order\"]] %>% \n  length()"},{"path":"inverse-normalize-by-microscope.html","id":"run","chapter":"11 Inverse-normalize by microscope","heading":"11.1.2 Run","text":"","code":"\n# Run GWAS\nout = run_gwas(d = in_list[[\"genotypes\"]],\n               m = in_list[[\"positions\"]],\n               p = in_list[[\"phenotypes\"]]\n              )\n\nsaveRDS(out, paste(\"/hps/nobackup/birney/users/ian/somites/microscope_test/gwas_results/\", MICROSCOPE, \".rds\", sep = \"\"))\nout = readRDS(paste(\"/hps/nobackup/birney/users/ian/somites/microscope_test/gwas_results/\", MICROSCOPE, \".rds\", sep = \"\"))"},{"path":"inverse-normalize-by-microscope.html","id":"run-permutations-2","chapter":"11 Inverse-normalize by microscope","heading":"11.2 Run permutations","text":"","code":""},{"path":"inverse-normalize-by-microscope.html","id":"permute-phenos-2","chapter":"11 Inverse-normalize by microscope","heading":"11.2.1 Permute phenos","text":"","code":"\nseeds = 1:10\n\ncounter = 0\nperm_phenos = purrr::map(seeds, function(SEED){\n  counter <<- counter + 1\n  # set seed\n  set.seed(seeds[counter])\n  # randomise\n  phenos = phenos %>% \n      # randomise phenotype\n      dplyr::mutate(dplyr::across(all_of(TARGET_PHENO),\n                                  ~ sample(.x)))\n})"},{"path":"inverse-normalize-by-microscope.html","id":"run-gwls-2","chapter":"11 Inverse-normalize by microscope","heading":"11.2.2 Run GWLS","text":"","code":"\nperm_out = purrr::map(perm_phenos, function(PERM_PHENO){\n  ## Read in file and wrangle\n  phenos = PERM_PHENO\n  \n  ## Filter and order phenotypes\n  in_list[[\"phenotypes\"]] = phenos %>%\n      # filter phenotypes for those with genotypes\n      dplyr::filter(SAMPLE %in% in_list[[\"sample_order\"]]) %>%\n      # join to `sample_order` to ensure phenotypes are in the correct order   \n      dplyr::left_join(tibble::tibble(SAMPLE = in_list[[\"sample_order\"]]),\n                       .,\n                       by = \"SAMPLE\") %>%\n      # remove NAs (created by the samples that have genotypes but not phenotypes)\n      tidyr::drop_na() %>%\n      # the GridLMM code doesn't work with tibbles\n      as.data.frame()\n  \n  ## Filter genotypes for those that have phenotypes\n  in_list[[\"genotypes\"]] = in_list[[\"genotypes\"]] %>%\n      dplyr::slice(in_list[[\"sample_order\"]] %in% in_list[[\"phenotypes\"]]$SAMPLE %>% \n                     which())\n  \n  ## Filter sample_order for those that have phenotypes\n  in_list[[\"sample_order\"]] = in_list[[\"phenotypes\"]]$SAMPLE\n              \n  # Run GWAS\n  \n  out = run_gwas(d = in_list[[\"genotypes\"]],\n                 m = in_list[[\"positions\"]],\n                 p = in_list[[\"phenotypes\"]]\n                )\n  \n  return(out)\n})\n\nnames(perm_out) = seeds\n\nsaveRDS(perm_out, paste(\"/hps/nobackup/birney/users/ian/somites/microscope_test/perms/\", MICROSCOPE, \".rds\", sep = \"\"))\nperm_out = readRDS(paste(\"/hps/nobackup/birney/users/ian/somites/microscope_test/perms/\", MICROSCOPE, \".rds\", sep = \"\"))"},{"path":"inverse-normalize-by-microscope.html","id":"get-minimum-2","chapter":"11 Inverse-normalize by microscope","heading":"11.2.3 Get minimum","text":"","code":"\nperm_df = purrr::map_dfr(perm_out, function(PERM){\n  OUT = tibble::tibble(MIN_P = PERM$results$p_value_REML %>%\n                         min(., na.rm = T)\n  )\n}, .id = \"SEED\")\n\n# Get minimum\nSIG_LEVEL = min(perm_df$MIN_P)\n\n# Get bonferroni correction\nSIG_BONF = ALPHA / nrow(out$results)"},{"path":"inverse-normalize-by-microscope.html","id":"generate-manhattan-plot-2","chapter":"11 Inverse-normalize by microscope","heading":"11.3 Generate Manhattan plot","text":"","code":"\nout_clean = clean_gwas_res(out,\n                           bin_length = BIN_LENGTH,\n                           chr_lens = med_chr_lens)\n\n\n# Get bonferroni significance level\nBONFERRONI = ALPHA / nrow(out_clean)\n\n# Plot\nout_plot = plot_man(out_clean,\n                    site_filter = \"all_sites\",\n                    phenotype = TARGET_PHENO,\n                    bin_length = BIN_LENGTH, \n                    gwas_pal = intercept_pal,\n                    med_chr_lens = med_chr_lens,\n                    sig_level = SIG_LEVEL,\n                    bonferroni = BONFERRONI) +\n                 #ylim(0,7) + \n                 labs(subtitle = paste(\"Microscope: \", MICROSCOPE, \"\\nCovariates: None\\nn samples: \", N_SAMPLES, sep = \"\"))\n\nout_plot\nggsave(file.path(PLOT_DIR, paste(MICROSCOPE, \"_manhattan.png\", sep = \"\")),\n       out_plot,\n       device = \"png\",\n       width = 9.6,\n       height = 6,\n       units = \"in\",\n       dpi = 400)"},{"path":"reporter-as-covariate.html","id":"reporter-as-covariate","chapter":"12 Reporter as covariate","heading":"12 Reporter as covariate","text":"Run GWAS split inverse-normalised microscope, reporter genotype covariate.","code":""},{"path":"reporter-as-covariate.html","id":"setup","chapter":"12 Reporter as covariate","heading":"12.1 Setup","text":"","code":"\nlibrary(tidyverse)\nlibrary(GridLMM)\nlibrary(KRLS)\n\nGENO_FILE = \"/nfs/research/birney/users/ian/somites/association_testing/20220214/all_sites/inputs/5000.rds\"\nPHENO_FILE = here::here(\"data/20220214_phenotypes.xlsx\") # True phenotypes\nGWLS_SOURCE_FILE = here::here(\"workflow/scripts/run_gwls_source.R\")\nMANHAT_SOURCE_FILE = here::here(\"workflow/scripts/get_manhattan_source.R\")\nBIN_LENGTH = 5000\nTARGET_PHENO = c(\"intercept\")\nMICROSCOPE = \"split_invnorm_reporter\"\nOUT_PHENOS = here::here(\"data/20220310_invnorm_phenos.csv\")\nPLOT_DIR = here::here(\"book/plots/20220214/microscope_test\")\nALPHA = 0.05\nREPORTER_LOC = tibble::tibble(CHROM = 16,\n                              START = 28706898,\n                              END = 28708417)\n\n# Get GWAS functions\n\nsource(GWLS_SOURCE_FILE)\nsource(MANHAT_SOURCE_FILE)\n# Get lighter/darker functions\nsource(\"https://gist.githubusercontent.com/brettellebi/c5015ee666cdf8d9f7e25fa3c8063c99/raw/91e601f82da6c614b4983d8afc4ef399fa58ed4b/karyoploteR_lighter_darker.R\")"},{"path":"reporter-as-covariate.html","id":"read-in-data-2","chapter":"12 Reporter as covariate","heading":"12.2 Read in data","text":"","code":""},{"path":"reporter-as-covariate.html","id":"genos","chapter":"12 Reporter as covariate","heading":"12.2.1 Genos","text":"","code":"\n# Load genotypes and positions\nin_list = readRDS(GENO_FILE)"},{"path":"reporter-as-covariate.html","id":"phenos","chapter":"12 Reporter as covariate","heading":"12.2.2 Phenos","text":"","code":"\n# Read in phenotypes\n\n## Read in file and wrangle\nphenos = readxl::read_xlsx(PHENO_FILE) %>%\n    # adjust sample names\n    dplyr::mutate(SAMPLE = fish %>% stringr::str_remove(\"KC\") %>% \n                    as.numeric()) %>%\n    # select key columns\n    dplyr::select(SAMPLE, all_of(TARGET_PHENO), Microscope) %>%\n    # ensure that the phenotype column is numeric\n    dplyr::mutate(dplyr::across(all_of(TARGET_PHENO),\n                                ~ as.numeric(.x)))\n\n## Split into two DFs by microscope and inverse-normalise\nphenos_au = phenos %>% \n  dplyr::filter(Microscope == \"AU\") %>% \n  dplyr::mutate(dplyr::across(dplyr::all_of(TARGET_PHENO),\n                              ~my.invnorm(.)))\n\nphenos_db = phenos %>% \n  dplyr::filter(Microscope == \"DB\") %>% \n  dplyr::mutate(dplyr::across(dplyr::all_of(TARGET_PHENO),\n                              ~my.invnorm(.)))\n\n## Combine\nphenos = dplyr::bind_rows(phenos_au,\n                          phenos_db) %>% \n  dplyr::arrange(SAMPLE) %>% \n  dplyr::mutate(SAMPLE = SAMPLE %>% \n                  as.character())\n\n## Write to file\nreadr::write_csv(phenos, OUT_PHENOS)\n\n# Plot\nmicr_pal = c(\"#8D99AE\", \"#2b2d42\")\n\npheno_hist = phenos %>% \n  # remove NAs in `Microscope` column\n  dplyr::filter(!is.na(Microscope)) %>% \n  ggplot() +\n    geom_histogram(aes(intercept, fill = Microscope),\n                   bins = 50) +\n    scale_fill_manual(values = micr_pal) +\n    facet_grid(rows = vars(Microscope)) +\n    xlab(\"period intercept\") +\n    theme_bw() +\n    ggtitle(\"Inverse-normalised period intercept split by microscope\") +\n    guides(fill = \"none\")\n\npheno_hist"},{"path":"reporter-as-covariate.html","id":"covariates","chapter":"12 Reporter as covariate","heading":"12.2.3 Covariates","text":"","code":"\n# Get genotypes for reporter\nrep_ind = which(in_list[[\"positions\"]]$CHROM == REPORTER_LOC$CHROM & in_list[[\"positions\"]]$BIN_START < REPORTER_LOC$START & in_list[[\"positions\"]]$BIN_END > REPORTER_LOC$END)\n\n# Sanity check\nREPORTER_LOC\n#> # A tibble: 1 × 3\n#>   CHROM    START      END\n#>   <dbl>    <dbl>    <dbl>\n#> 1    16 28706898 28708417\nin_list[[\"positions\"]][rep_ind, ]\n#>       CHROM BIN_START  BIN_END\n#> 75474    16  28705001 28710000\n\n# Pull genotypes for that locus\nrep_genos = tibble::tibble(SAMPLE = in_list[[\"sample_order\"]],\n                           reporter_geno = in_list[[\"genotypes\"]][, rep_ind])\n\n# Bind to phenos\nphenos = dplyr::left_join(phenos,\n                          rep_genos,\n                          by = \"SAMPLE\")\n\n# How many counts for each reporter genotype? \nphenos %>%\n  count(reporter_geno)\n#> # A tibble: 4 × 2\n#>   reporter_geno     n\n#>           <dbl> <int>\n#> 1            -1   341\n#> 2             0   249\n#> 3             1     1\n#> 4            NA    47\n# Plot\nphenos %>% \n  dplyr::mutate(reporter_geno = as.factor(reporter_geno)) %>% \n  ggplot(aes(reporter_geno, intercept)) +\n    geom_violin(fill = intercept_pal[3]) + \n    geom_boxplot(width = 0.3, fill = intercept_pal[2]) +\n    ggbeeswarm::geom_beeswarm(size = 0.4, alpha = 0.5, colour = lighter(intercept_pal[3])) +\n    theme_bw() +\n    xlab(\"Reporter genotype\") +\n    ylab(\"Inverse-normalised intercept split by microscope\") +\n    ggtitle(\"Intercept phenotype by reporter genotype\")\n#> Warning: Groups with fewer than two data points have been\n#> dropped."},{"path":"reporter-as-covariate.html","id":"prepare-input-1","chapter":"12 Reporter as covariate","heading":"12.2.4 Prepare input","text":"","code":"\n## Filter and order phenotypes\nin_list[[\"phenotypes\"]] = phenos %>%\n    # filter phenotypes for those with genotypes\n    dplyr::filter(SAMPLE %in% in_list[[\"sample_order\"]]) %>%\n    # join to `sample_order` to ensure phenotypes are in the correct order   \n    dplyr::left_join(tibble::tibble(SAMPLE = in_list[[\"sample_order\"]]),\n                     .,\n                     by = \"SAMPLE\") %>%\n    # remove NAs (created by the samples that have genotypes but not phenotypes)\n    tidyr::drop_na() %>%\n    # the GridLMM code doesn't work with tibbles\n    as.data.frame()\n\n## Filter genotypes for those that have phenotypes\nin_list[[\"genotypes\"]] = in_list[[\"genotypes\"]] %>%\n    dplyr::slice(in_list[[\"sample_order\"]] %in% in_list[[\"phenotypes\"]]$SAMPLE %>% \n                   which())\n\n## Filter sample_order for those that have phenotypes\nin_list[[\"sample_order\"]] = in_list[[\"phenotypes\"]]$SAMPLE\n\n## Get number of samples\nN_SAMPLES = in_list[[\"sample_order\"]] %>% \n  length()"},{"path":"reporter-as-covariate.html","id":"run-1","chapter":"12 Reporter as covariate","heading":"12.2.5 Run","text":"","code":"\n# Run GWAS\nout = run_gwas(d = in_list[[\"genotypes\"]],\n               m = in_list[[\"positions\"]],\n               p = in_list[[\"phenotypes\"]],\n               covariates = \"reporter_geno\"\n              )\n\nsaveRDS(out, paste(\"/hps/nobackup/birney/users/ian/somites/microscope_test/gwas_results/\", MICROSCOPE, \".rds\", sep = \"\"))\nout = readRDS(paste(\"/hps/nobackup/birney/users/ian/somites/microscope_test/gwas_results/\", MICROSCOPE, \".rds\", sep = \"\"))\n\n# Rename p-value column\nif (\"p_value_REML\" %in% colnames(out$results)){\n  P_COL = \"p_value_REML\"\n} else {\n  P_COL = \"p_value_REML.1\"\n}\n\n# Rename column in results\n\nif (P_COL == \"p_value_REML.1\"){\n  out$results = out$results %>% \n    dplyr::rename(p_value_REML = p_value_REML.1)\n}"},{"path":"reporter-as-covariate.html","id":"run-permutations-3","chapter":"12 Reporter as covariate","heading":"12.3 Run permutations","text":"","code":""},{"path":"reporter-as-covariate.html","id":"permute-phenos-3","chapter":"12 Reporter as covariate","heading":"12.3.1 Permute phenos","text":"","code":"\nseeds = 1:10\n\ncounter = 0\nperm_phenos = purrr::map(seeds, function(SEED){\n  counter <<- counter + 1\n  # set seed\n  set.seed(seeds[counter])\n  # randomise\n  # Randomise all columns other than `fish`\n  permute_order = sample(nrow(phenos))\n  out = phenos %>% \n    dplyr::mutate(dplyr::across(-SAMPLE,\n                                ~.x[order(permute_order)])\n                  )\n})"},{"path":"reporter-as-covariate.html","id":"run-gwls-3","chapter":"12 Reporter as covariate","heading":"12.3.2 Run GWLS","text":"","code":"\nperm_out = purrr::map(perm_phenos, function(PERM_PHENO){\n  ## Read in file and wrangle\n  phenos = PERM_PHENO\n  \n  ## Filter and order phenotypes\n  in_list[[\"phenotypes\"]] = phenos %>%\n      # filter phenotypes for those with genotypes\n      dplyr::filter(SAMPLE %in% in_list[[\"sample_order\"]]) %>%\n      # join to `sample_order` to ensure phenotypes are in the correct order   \n      dplyr::left_join(tibble::tibble(SAMPLE = in_list[[\"sample_order\"]]),\n                       .,\n                       by = \"SAMPLE\") %>%\n      # remove NAs (created by the samples that have genotypes but not phenotypes)\n      tidyr::drop_na() %>%\n      # the GridLMM code doesn't work with tibbles\n      as.data.frame()\n  \n  ## Filter genotypes for those that have phenotypes\n  in_list[[\"genotypes\"]] = in_list[[\"genotypes\"]] %>%\n      dplyr::slice(in_list[[\"sample_order\"]] %in% in_list[[\"phenotypes\"]]$SAMPLE %>% \n                     which())\n  \n  ## Filter sample_order for those that have phenotypes\n  in_list[[\"sample_order\"]] = in_list[[\"phenotypes\"]]$SAMPLE\n              \n  # Run GWAS\n  \n  out = run_gwas(d = in_list[[\"genotypes\"]],\n                 m = in_list[[\"positions\"]],\n                 p = in_list[[\"phenotypes\"]],\n                 covariates = \"reporter_geno\"\n                )\n  \n  return(out)\n})\n\nnames(perm_out) = seeds\n\nsaveRDS(perm_out, paste(\"/hps/nobackup/birney/users/ian/somites/microscope_test/perms/\", MICROSCOPE, \".rds\", sep = \"\"))\nperm_out = readRDS(paste(\"/hps/nobackup/birney/users/ian/somites/microscope_test/perms/\", MICROSCOPE, \".rds\", sep = \"\"))"},{"path":"reporter-as-covariate.html","id":"get-minimum-3","chapter":"12 Reporter as covariate","heading":"12.3.3 Get minimum","text":"","code":"\nperm_df = purrr::map_dfr(perm_out, function(PERM){\n  OUT = tibble::tibble(MIN_P = PERM$results %>% \n                         dplyr::select(dplyr::all_of(P_COL)) %>%\n                         min(., na.rm = T)\n  )\n}, .id = \"SEED\")\n\n# Get minimum\nSIG_LEVEL = min(perm_df$MIN_P)\n\n# Get bonferroni correction\nSIG_BONF = ALPHA / nrow(out$results)"},{"path":"reporter-as-covariate.html","id":"generate-manhattan-plot-3","chapter":"12 Reporter as covariate","heading":"12.4 Generate Manhattan plot","text":"","code":"\nout_clean = clean_gwas_res(out,\n                           bin_length = BIN_LENGTH,\n                           chr_lens = med_chr_lens)\n\n\n# Get bonferroni significance level\nBONFERRONI = ALPHA / nrow(out_clean)\n\n# Plot\nout_plot = plot_man(out_clean,\n                    site_filter = \"all_sites\",\n                    phenotype = TARGET_PHENO,\n                    bin_length = BIN_LENGTH, \n                    gwas_pal = intercept_pal,\n                    med_chr_lens = med_chr_lens,\n                    sig_level = SIG_LEVEL,\n                    bonferroni = BONFERRONI) +\n                 #ylim(0,7) + \n                 labs(subtitle = paste(\"Microscope: split_invnorm\", \"\\nCovariates: Reporter genotype\\nn samples: \", N_SAMPLES, sep = \"\"))\n\nout_plot\n#> Warning: Removed 9 rows containing missing values\n#> (geom_point).\nggsave(file.path(PLOT_DIR, paste(MICROSCOPE, \"_manhattan.png\", sep = \"\")),\n       out_plot,\n       device = \"png\",\n       width = 9.6,\n       height = 6,\n       units = \"in\",\n       dpi = 400)\n#> Warning: Removed 9 rows containing missing values\n#> (geom_point)."},{"path":"annotations-of-gwas-hits.html","id":"annotations-of-gwas-hits","chapter":"13 Annotations of GWAS hits","heading":"13 Annotations of GWAS hits","text":"","code":"\nlibrary(here)\nlibrary(tidyverse)\nlibrary(biomaRt)\nDATE_OF_ASSOC_TEST = \"20220214\"\nSITE_FILTER = \"all_sites\"\nCOVARIATES = \"None\"\nINVERSE_NORM = \"TRUE\"\nBIN_LENGTH = 5000\nOUT_DIR = here::here(\"data\", DATE_OF_ASSOC_TEST, \"annotations\")"},{"path":"annotations-of-gwas-hits.html","id":"intercept-3","chapter":"13 Annotations of GWAS hits","heading":"13.1 Intercept","text":"","code":"\nTARGET_PHENO = \"intercept\""},{"path":"annotations-of-gwas-hits.html","id":"read-in-data-3","chapter":"13 Annotations of GWAS hits","heading":"13.1.1 Read in data","text":"","code":"\nGWAS_RESULTS = file.path(\"/hps/nobackup/birney/users/ian/somites/association_testing\",\n                         DATE_OF_ASSOC_TEST,\n                         SITE_FILTER,\n                         \"true_results\",\n                         TARGET_PHENO,\n                         COVARIATES,\n                         INVERSE_NORM,\n                         paste(BIN_LENGTH, \".rds\", sep = \"\"))\n\nRESULTS = readRDS(GWAS_RESULTS)\n\nPERMS_PATHS = file.path(\"/hps/nobackup/birney/users/ian/somites/association_testing/\",\n                          DATE_OF_ASSOC_TEST,\n                          SITE_FILTER,\n                          \"permutations\",\n                          TARGET_PHENO,\n                          COVARIATES,\n                          INVERSE_NORM,\n                          BIN_LENGTH)\nPERMS = list.files(PERMS_PATHS, full.names = T)\nnames(PERMS) = PERMS %>% \n  basename %>% \n  stringr::str_remove(\".rds\")\n\nif (\"p_value_REML\" %in% colnames(RESULTS$results)){\n  P_COL = \"p_value_REML\"\n} else {\n  P_COL = \"p_value_REML.1\"\n}\n\n# Rename column in results\n\nif (P_COL == \"p_value_REML.1\"){\n  RESULTS$results = RESULTS$results %>% \n    dplyr::rename(p_value_REML = p_value_REML.1)\n}\n\n# Read in permutation results and get `SIG_LEVEL`\n\nPERM_LIST = purrr::map(PERMS, function(PERM){\n  readRDS(PERM)\n})\n\nperm_df = purrr::map_dfr(PERM_LIST, function(PERM){\n  OUT = tibble::tibble(MIN_P = PERM$results %>% \n                         dplyr::select(dplyr::all_of(P_COL)) %>%\n                         min(., na.rm = T)\n  )\n}, .id = \"SEED\")\n\n# Get minimum\nSIG_LEVEL = min(perm_df$MIN_P)"},{"path":"annotations-of-gwas-hits.html","id":"pull-significant-loci","chapter":"13 Annotations of GWAS hits","heading":"13.1.2 Pull significant loci","text":"","code":"\nSIG_LOCS = RESULTS$results %>% \n  dplyr::filter(p_value_REML < SIG_LEVEL) %>% \n  dplyr::select(CHROM = Chr,\n                BIN_START = pos) %>% \n  dplyr::mutate(BIN_END = BIN_START + BIN_LENGTH - 1)\n                "},{"path":"annotations-of-gwas-hits.html","id":"get-annotations","chapter":"13 Annotations of GWAS hits","heading":"13.1.3 Get annotations","text":"","code":"\n## Select dataset\nolat_mart = biomaRt::useEnsembl(biomart = \"ensembl\", \n                                dataset = \"olatipes_gene_ensembl\", \n                                mirror = \"uswest\")\n\nolat_attr = biomaRt::listAttributes(olat_mart)\n\nolat_genes = biomaRt::getBM(attributes = c(\"chromosome_name\",\n                                           \"start_position\",\n                                           \"end_position\",\n                                           \"ensembl_gene_id\",\n                                           \"hgnc_symbol\",\n                                           \"ensembl_exon_id\",\n                                           \"description\",\n                                           \"strand\",\n                                           \"transcript_start\",\n                                           \"transcript_end\"),\n                             mart = olat_mart) \n\nolat_genes_r = olat_genes %>% \n  # change strand characters\n  dplyr::mutate(strand = dplyr::recode(.$strand,\n                                       `1` = \"+\",\n                                       `-1` = \"-\")\n                ) %>% \n  GenomicRanges::makeGRangesFromDataFrame(seqnames.field = \"chromosome_name\",\n                                            start.field = \"start_position\",\n                                            end.field = \"end_position\")\n\n# convert hits to genomic ranges\nsig_loc_r = SIG_LOCS %>% \n  GenomicRanges::makeGRangesFromDataFrame(seqnames.field = \"CHROM\",\n                                          start.field = \"BIN_START\",\n                                          end.field = \"BIN_END\",\n                                          ignore.strand = T)\n\n\n# find overlaps\nolaps = GenomicRanges::findOverlaps(sig_loc_r, olat_genes_r)\n\n# Pull out data frame of hits\nhits = olat_genes[unique(olaps@to), ]\n\nhits %>% \n  DT::datatable(.)\n# Save to file\nreadr::write_csv(hits,\n                 file.path(OUT_DIR, paste(TARGET_PHENO, \".csv\", sep = \"\")))"},{"path":"annotations-of-gwas-hits.html","id":"psm-area","chapter":"13 Annotations of GWAS hits","heading":"13.2 PSM area","text":"","code":"\nTARGET_PHENO = \"unsegmented_psm_area\""},{"path":"annotations-of-gwas-hits.html","id":"read-in-data-4","chapter":"13 Annotations of GWAS hits","heading":"13.2.1 Read in data","text":"","code":"\nGWAS_RESULTS = file.path(\"/hps/nobackup/birney/users/ian/somites/association_testing\",\n                         DATE_OF_ASSOC_TEST,\n                         SITE_FILTER,\n                         \"true_results\",\n                         TARGET_PHENO,\n                         COVARIATES,\n                         INVERSE_NORM,\n                         paste(BIN_LENGTH, \".rds\", sep = \"\"))\n\nRESULTS = readRDS(GWAS_RESULTS)\n\nPERMS_PATHS = file.path(\"/hps/nobackup/birney/users/ian/somites/association_testing/\",\n                          DATE_OF_ASSOC_TEST,\n                          SITE_FILTER,\n                          \"permutations\",\n                          TARGET_PHENO,\n                          COVARIATES,\n                          INVERSE_NORM,\n                          BIN_LENGTH)\nPERMS = list.files(PERMS_PATHS, full.names = T)\nnames(PERMS) = PERMS %>% \n  basename %>% \n  stringr::str_remove(\".rds\")\n\nif (\"p_value_REML\" %in% colnames(RESULTS$results)){\n  P_COL = \"p_value_REML\"\n} else {\n  P_COL = \"p_value_REML.1\"\n}\n\n# Rename column in results\n\nif (P_COL == \"p_value_REML.1\"){\n  RESULTS$results = RESULTS$results %>% \n    dplyr::rename(p_value_REML = p_value_REML.1)\n}\n\n# Read in permutation results and get `SIG_LEVEL`\n\nPERM_LIST = purrr::map(PERMS, function(PERM){\n  readRDS(PERM)\n})\n\nperm_df = purrr::map_dfr(PERM_LIST, function(PERM){\n  OUT = tibble::tibble(MIN_P = PERM$results %>% \n                         dplyr::select(dplyr::all_of(P_COL)) %>%\n                         min(., na.rm = T)\n  )\n}, .id = \"SEED\")\n\n# Get minimum\nSIG_LEVEL = min(perm_df$MIN_P)"},{"path":"annotations-of-gwas-hits.html","id":"pull-significant-loci-1","chapter":"13 Annotations of GWAS hits","heading":"13.2.2 Pull significant loci","text":"","code":"\nSIG_LOCS = RESULTS$results %>% \n  dplyr::filter(p_value_REML < SIG_LEVEL) %>% \n  dplyr::select(CHROM = Chr,\n                BIN_START = pos) %>% \n  dplyr::mutate(BIN_END = BIN_START + BIN_LENGTH - 1)\n                "},{"path":"annotations-of-gwas-hits.html","id":"get-annotations-1","chapter":"13 Annotations of GWAS hits","heading":"13.2.3 Get annotations","text":"","code":"\n# convert hits to genomic ranges\nsig_loc_r = SIG_LOCS %>% \n  GenomicRanges::makeGRangesFromDataFrame(seqnames.field = \"CHROM\",\n                                          start.field = \"BIN_START\",\n                                          end.field = \"BIN_END\",\n                                          ignore.strand = T)\n\n\n# find overlaps\nolaps = GenomicRanges::findOverlaps(sig_loc_r, olat_genes_r)\n\n# Pull out data frame of hits\nhits = olat_genes[unique(olaps@to), ]\n\nhits %>% \n  DT::datatable(.)\n# Save to file\nreadr::write_csv(hits,\n                 file.path(OUT_DIR, paste(TARGET_PHENO, \".csv\", sep = \"\")))"},{"path":"references.html","id":"references","chapter":"References","heading":"References","text":"","code":""}]
