include: "rules/00_1_common.smk"
include: "rules/00_2_common.smk"
##### Modules #####

include: "rules/01_ref.smk"
include: "rules/02_1_F0_mapping.smk"
include: "rules/02_2_F0_calling.smk"
include: "rules/03_1_F1_mapping.smk"
include: "rules/03_2_F1_calling.smk"
#include: "rules/04_2_trio_homozygosity.smk"
#include: "rules/04_F2_mapping.smk"
#include: "rules/05_F2_recomb_blocks.smk"
##include: "rules/06_F0_recomb_blocks.smk"
#include: "rules/07_1_GridLMM.smk"
#include: "rules/07_3_GCTA.smk"
#include: "rules/08_F2_calling.smk"
#include: "rules/09_TIGER.smk"

##### Target rules #####

rule all:
    input:
################
## 00_common.smk
################
## create_f1_samples_file
#        config["F1_samples"],
## create_f2_samples_file
#        config["F2_samples"],
################
## 01_ref.smk
################
        expand(rules.get_genome.output,
                ref = config["refs"]
        ),
        expand(rules.genome_faidx.output,
                ref = config["refs"]
        ),
        expand(rules.genome_dict.output,
                ref = config["refs"]
        ),
        expand(rules.bwa_mem2_index.output,
                ref = config["refs"]
        ),
        expand(rules.get_chrom_lengths.output,
                ref = config["refs"]
        ),
################
## 02_F0_mapping.smk
################
## map_reads_F0
#        expand(os.path.join(config["working_dir"], "sams/F0/mapped/{F0_sample}-{unit}.sam"),
#                zip,
#                F0_sample = F0_samples['sample'],
#                unit = F0_samples['unit']
#        ),
## replace_rg_F0
#        expand(os.path.join(config["working_dir"], "sams/F0/grouped/{F0_sample}-{unit}.sam"),
#                zip,
#                F0_sample = F0_samples['sample'],
#                unit = F0_samples['unit']
#        ),
## sort_sam_F0
#        expand(os.path.join(config["working_dir"], "bams/F0/sorted/{F0_sample}-{unit}.bam"),
#                zip,
#                F0_sample = F0_samples['sample'],
#                unit = F0_samples['unit']
#        ),
## mark_duplicates_F0
#        expand(os.path.join(config["working_dir"], "bams/F0/marked/{F0_sample}-{unit}.bam"),
#                zip,
#                F0_sample = F0_samples['sample'],
#                unit = F0_samples['unit']                
#        ),
## merge_bams_F0
#        expand(os.path.join(config["working_dir"], "bams/F0/merged/{F0_sample}.bam"),
#                F0_sample = config["F0_lines"]
#        ),
## samtools_index_F0
#        expand(os.path.join(config["working_dir"], "bams/F0/merged/{F0_sample}.bam.bai"),
#                F0_sample = config["F0_lines"]
#        ),
################
## 02_2_F0_calling.smk
################
        expand(rules.merge_variants.output,
                ref = config["refs"]
        ),
################
## 03_1_F1_mapping.smk
################
        expand(rules.samtools_index_F1.output,
                ref = config["refs"],
                F1_sample = F1_samples['SAMPLE']
        ),
################
## 03_2_F1_calling.smk
################
        expand(rules.merge_variants_F0_and_F1.output,
                ref = config["refs"]
        ),
###############
# 04_2_trio_homozygosity.smk
###############
## trio_gt_counts_in_bins
#        expand(os.path.join(
#            config["working_dir"],
#            "genos/F0_and_F1/counts/{sample}/{bin_length}.csv"),
#                sample = ["Cab", "Kaga", "F1"],
#                bin_length = 5000
#        ),
## circos_homozygosity
#        expand("book/plots/circos/trio_homo/{bin_length}/{sample}.png",
#                bin_length = 5000,
#                sample = ["Cab", "Kaga", "F1"]
#        ),
## extract_homo_div_snps
#        os.path.join(
#            config["working_dir"],
#            "genos/F0_and_F1/homo_div/snps_pass.txt"
#        ),
###############
# 04_F2_mapping.smk
###############
## copy_f2_seq_data
#        expand(os.path.join(config["working_dir"], "fastqs/F2/{F2_sample}_{pair}.txt.gz"),
#                F2_sample = F2_samples['SAMPLE'],
#                pair = config["pairs"]
#        ),
## bwa_mem2_mem
#        expand(os.path.join(config["working_dir"], "sams/F2/bwamem2/mapped/{F2_sample}.sam"),
#                F2_sample = F2_samples['SAMPLE']
#        ),
## sort_sam_f2
#        expand(os.path.join(config["working_dir"], "bams/F2/bwamem2/sorted/{F2_sample}.bam"),
#                F2_sample = F2_samples['SAMPLE']
#        ),
## mark_duplicates_f2
#        expand(os.path.join(config["working_dir"], "bams/F2/bwamem2/marked/{F2_sample}.bam"),
#                F2_sample = F2_samples['SAMPLE']
#        ),
## samtools_index_f2
#        expand(os.path.join(config["working_dir"], "bams/F2/bwamem2/marked/{F2_sample}.bam.bai"),
#                F2_sample = F2_samples['SAMPLE']
#        ),
################
## 05_F2_recomb_blocks.smk
################
##Â make_dp_AB_F2
#        expand(rules.make_dp_AB_F2.output,
#                site_filter = config["site_filter"],
#                F2_sample = F2_samples['SAMPLE']
#        ),
## run_rc_block_F2
#        expand(os.path.join(config["data_store_dir"], "recombination_blocks/F2/{site_filter}/{bin_length}.txt"),
#                site_filter = config["site_filter"],
#                bin_length = config["bin_length"]
#        ),
## consolidate_dbABs_Ewan
#        expand(os.path.join(config["data_store_dir"], "dpABs/F2_consolidated/{site_filter}.txt"),
#                site_filter = config["site_filter"],
#        ),
## process_rc_blocks
#        expand(os.path.join(
#            config["working_dir"],
#            "processed_recomb/F2/{site_filter}/{bin_length}.csv"),
#                site_filter = config["site_filter"],
#                bin_length = config["bin_length"],                
#        ),
#        expand(rules.plot_recombination_blocks.output.karyoplot_no_missing,
#                site_filter = config["site_filter"],
#                bin_length = config["bin_length"],                
#        ),
################
## 06_F0_recomb_blocks.smk
################
## run_rc_block_F0
#        expand(os.path.join(config["data_store_dir"], "recombination_blocks/F0/{site_filter}/{bin_length}.txt"),
#                site_filter = config["site_filter"],
#                bin_length = config["bin_length_F0"]
#        ),
################
## 07_1_GridLMM.smk
###############
## create_gwas_input
#        expand(os.path.join(
#                config["working_dir"], 
#                "association_testing/{site_filter}/inputs/{bin_length}.rds"),
#                        site_filter = config["site_filter"],
#                        bin_length = config["bin_length"]
#        ),
## simulate_phenotypes
#        expand(os.path.join(
#                config["working_dir"],
#                "association_testing/{site_filter}/sim_phenos/{bin_length}.xlsx"),
#                        site_filter = config["site_filter"],
#                        bin_length = config["bin_length"]
#        ),
## test_gwas
#        expand(os.path.join(
#                config["working_dir"],
#                "association_testing/{site_filter}/test_results/{bin_length}.rds"
#                ),
#                        site_filter = config["site_filter"],
#                        bin_length = config["bin_length"]
#        ),
## run_gwas
#        expand(os.path.join(
#                config["working_dir"],
#                "association_testing/{site_filter}/true_results/{target_phenotype}/{covariates}/{inverse_norm}/{bin_length}.rds"),
#                        site_filter = config["site_filter"],
#                        target_phenotype = config["target_phenotypes"],
#                        covariates = config["covariates"],
#                        inverse_norm = config["inverse_norm"],
#                        bin_length = config["bin_length"]
#        ),
## create_permuted_phenotypes
#        expand(os.path.join(
#                config["working_dir"], 
#                "permuted_phenos/{permutation_seed}.xlsx"),
#                        permutation_seed = PERM_SEEDS
#        ),
## run_permutations
#        expand(os.path.join(
#                config["working_dir"], 
#                "association_testing/{site_filter}/permutations/{target_phenotype}/{covariates}/{inverse_norm}/{bin_length}/{permutation_seed}.rds"),
#                        site_filter = config["site_filter"],
#                        target_phenotype = config["target_phenotypes"],
#                        covariates = config["covariates"],
#                        inverse_norm = config["inverse_norm"],                        
#                        bin_length = config["bin_length"],
#                        permutation_seed = PERM_SEEDS   
#        ),
## get_manhattan
#        expand("book/plots/manhattans/{site_filter}/{target_phenotype}/{covariates}/{inverse_norm}/{bin_length}.png",
#                        site_filter = config["site_filter"],
#                        target_phenotype = config["target_phenotypes"],
#                        covariates = config["covariates"],
#                        inverse_norm = config["inverse_norm"],                        
#                        bin_length = config["bin_length"],
#        ),
## get_annotations
#        expand("data/{date_of_assoc_test}/annotations/{site_filter}/{target_phenotype}/{covariates}/{inverse_norm}/{bin_length}.csv",
#                        site_filter = "all_sites",
#                        target_phenotype = "unsegmented_psm_area",
#                        covariates = "Microscope",
#                        inverse_norm = "TRUE",                        
#                        bin_length = "5000",                        
#        ),
################
## 07_2_GCTA.smk
################
## create_ped
#        expand(os.path.join(
#            config["working_dir"],
#            "peds/F2/{site_filter}/{bin_length}/{phenotype}.phen"),
#                site_filter = config["site_filter"],
#                bin_length = config["bin_length"],
#                phenotype = config["target_phenotypes"]
#        ),
## create_bed
#        expand(os.path.join(
#            config["working_dir"],
#            "beds/F2/{site_filter}/{bin_length}/{phenotype}.bed"),
#                site_filter = config["site_filter"],
#                bin_length = config["bin_length"],
#                phenotype = config["target_phenotypes"] 
#        ,)
################
## 08_F2_calling.smk
###############
## merge_variants_F2
#        os.path.join(config["data_store_dir"], "vcfs/F2/final/all.vcf.gz"),


